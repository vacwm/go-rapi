// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: instrument_pnl_position_update.proto

package rti

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type InstrumentPnLPositionUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId             *int32   `protobuf:"varint,154467,req,name=template_id,json=templateId" json:"template_id,omitempty"`                                       // PB_OFFSET + MNM_TEMPLATE_ID
	IsSnapshot             *bool    `protobuf:"varint,110121,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`                                       // PB_OFFSET + MNM_UPDATE_TYPE
	FcmId                  *string  `protobuf:"bytes,154013,opt,name=fcm_id,json=fcmId" json:"fcm_id,omitempty"`                                                       // PB_OFFSET + MNM_FCM_ID
	IbId                   *string  `protobuf:"bytes,154014,opt,name=ib_id,json=ibId" json:"ib_id,omitempty"`                                                          // PB_OFFSET + MNM_IB_ID
	AccountId              *string  `protobuf:"bytes,154008,opt,name=account_id,json=accountId" json:"account_id,omitempty"`                                           // PB_OFFSET + MNM_ACCOUNT_ID
	Symbol                 *string  `protobuf:"bytes,110100,opt,name=symbol" json:"symbol,omitempty"`                                                                  // PB_OFFSET + MNM_SYMBOL
	Exchange               *string  `protobuf:"bytes,110101,opt,name=exchange" json:"exchange,omitempty"`                                                              // PB_OFFSET + MNM_EXCHANGE
	ProductCode            *string  `protobuf:"bytes,100749,opt,name=product_code,json=productCode" json:"product_code,omitempty"`                                     // PB_OFFSET + MNM_PRODUCT_CODE
	InstrumentType         *string  `protobuf:"bytes,110116,opt,name=instrument_type,json=instrumentType" json:"instrument_type,omitempty"`                            // PB_OFFSET + MNM_INSTRUMENT_TYPE
	FillBuyQty             *int32   `protobuf:"varint,154041,opt,name=fill_buy_qty,json=fillBuyQty" json:"fill_buy_qty,omitempty"`                                     // PB_OFFSET + MNM_FILL_BUY_QTY
	FillSellQty            *int32   `protobuf:"varint,154042,opt,name=fill_sell_qty,json=fillSellQty" json:"fill_sell_qty,omitempty"`                                  // PB_OFFSET + MNM_FILL_SELL_QTY
	OrderBuyQty            *int32   `protobuf:"varint,154037,opt,name=order_buy_qty,json=orderBuyQty" json:"order_buy_qty,omitempty"`                                  // PB_OFFSET + MNM_ORDER_BUY_QTY
	OrderSellQty           *int32   `protobuf:"varint,154038,opt,name=order_sell_qty,json=orderSellQty" json:"order_sell_qty,omitempty"`                               // PB_OFFSET + MNM_ORDER_SELL_QTY
	BuyQty                 *int32   `protobuf:"varint,154260,opt,name=buy_qty,json=buyQty" json:"buy_qty,omitempty"`                                                   // PB_OFFSET + MNM_BUY_QTY
	SellQty                *int32   `protobuf:"varint,154261,opt,name=sell_qty,json=sellQty" json:"sell_qty,omitempty"`                                                // PB_OFFSET + MNM_SELL_QTY
	AvgOpenFillPrice       *float64 `protobuf:"fixed64,154434,opt,name=avg_open_fill_price,json=avgOpenFillPrice" json:"avg_open_fill_price,omitempty"`                // PB_OFFSET + MNM_AVG_OPEN_FILL_PRICE
	MtmSecurity            *string  `protobuf:"bytes,154263,opt,name=mtm_security,json=mtmSecurity" json:"mtm_security,omitempty"`                                     // PB_OFFSET + MNM_MTM_SECURITY
	OpenLongOptionsValue   *string  `protobuf:"bytes,157105,opt,name=open_long_options_value,json=openLongOptionsValue" json:"open_long_options_value,omitempty"`      // PB_OFFSET + MNM_OPEN_LONG_OPTIONS_VALUE
	OpenShortOptionsValue  *string  `protobuf:"bytes,157106,opt,name=open_short_options_value,json=openShortOptionsValue" json:"open_short_options_value,omitempty"`   // PB_OFFSET + MNM_OPEN_SHORT_OPTIONS_VALUE
	ClosedOptionsValue     *string  `protobuf:"bytes,157107,opt,name=closed_options_value,json=closedOptionsValue" json:"closed_options_value,omitempty"`              // PB_OFFSET + MNM_CLOSED_OPTIONS_VALUE
	OptionCashReserved     *string  `protobuf:"bytes,157111,opt,name=option_cash_reserved,json=optionCashReserved" json:"option_cash_reserved,omitempty"`              // PB_OFFSET + MNM_OPTION_CASH_RESERVED
	OpenPositionPnl        *string  `protobuf:"bytes,156961,opt,name=open_position_pnl,json=openPositionPnl" json:"open_position_pnl,omitempty"`                       // PB_OFFSET + MNM_OPEN_POSITION_PNL
	OpenPositionQuantity   *int32   `protobuf:"varint,156962,opt,name=open_position_quantity,json=openPositionQuantity" json:"open_position_quantity,omitempty"`       // PB_OFFSET + MNM_OPEN_POSITION_QUANTITY
	ClosedPositionPnl      *string  `protobuf:"bytes,156963,opt,name=closed_position_pnl,json=closedPositionPnl" json:"closed_position_pnl,omitempty"`                 // PB_OFFSET + MNM_CLOSED_POSITION_PNL
	ClosedPositionQuantity *int32   `protobuf:"varint,156964,opt,name=closed_position_quantity,json=closedPositionQuantity" json:"closed_position_quantity,omitempty"` // PB_OFFSET + MNM_CLOSED_POSITION_QUANTITY
	NetQuantity            *int32   `protobuf:"varint,156967,opt,name=net_quantity,json=netQuantity" json:"net_quantity,omitempty"`                                    // PB_OFFSET + MNM_NET_QUANTITY
	Ssboe                  *int32   `protobuf:"varint,150100,opt,name=ssboe" json:"ssboe,omitempty"`                                                                   // PB_OFFSET + MNM_SECONDS_SINCE_BOE
	Usecs                  *int32   `protobuf:"varint,150101,opt,name=usecs" json:"usecs,omitempty"`                                                                   // PB_OFFSET + MNM_USECS
}

func (x *InstrumentPnLPositionUpdate) Reset() {
	*x = InstrumentPnLPositionUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_pnl_position_update_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentPnLPositionUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentPnLPositionUpdate) ProtoMessage() {}

func (x *InstrumentPnLPositionUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_pnl_position_update_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentPnLPositionUpdate.ProtoReflect.Descriptor instead.
func (*InstrumentPnLPositionUpdate) Descriptor() ([]byte, []int) {
	return file_instrument_pnl_position_update_proto_rawDescGZIP(), []int{0}
}

func (x *InstrumentPnLPositionUpdate) GetTemplateId() int32 {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return 0
}

func (x *InstrumentPnLPositionUpdate) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *InstrumentPnLPositionUpdate) GetFcmId() string {
	if x != nil && x.FcmId != nil {
		return *x.FcmId
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetIbId() string {
	if x != nil && x.IbId != nil {
		return *x.IbId
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetProductCode() string {
	if x != nil && x.ProductCode != nil {
		return *x.ProductCode
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetInstrumentType() string {
	if x != nil && x.InstrumentType != nil {
		return *x.InstrumentType
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetFillBuyQty() int32 {
	if x != nil && x.FillBuyQty != nil {
		return *x.FillBuyQty
	}
	return 0
}

func (x *InstrumentPnLPositionUpdate) GetFillSellQty() int32 {
	if x != nil && x.FillSellQty != nil {
		return *x.FillSellQty
	}
	return 0
}

func (x *InstrumentPnLPositionUpdate) GetOrderBuyQty() int32 {
	if x != nil && x.OrderBuyQty != nil {
		return *x.OrderBuyQty
	}
	return 0
}

func (x *InstrumentPnLPositionUpdate) GetOrderSellQty() int32 {
	if x != nil && x.OrderSellQty != nil {
		return *x.OrderSellQty
	}
	return 0
}

func (x *InstrumentPnLPositionUpdate) GetBuyQty() int32 {
	if x != nil && x.BuyQty != nil {
		return *x.BuyQty
	}
	return 0
}

func (x *InstrumentPnLPositionUpdate) GetSellQty() int32 {
	if x != nil && x.SellQty != nil {
		return *x.SellQty
	}
	return 0
}

func (x *InstrumentPnLPositionUpdate) GetAvgOpenFillPrice() float64 {
	if x != nil && x.AvgOpenFillPrice != nil {
		return *x.AvgOpenFillPrice
	}
	return 0
}

func (x *InstrumentPnLPositionUpdate) GetMtmSecurity() string {
	if x != nil && x.MtmSecurity != nil {
		return *x.MtmSecurity
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetOpenLongOptionsValue() string {
	if x != nil && x.OpenLongOptionsValue != nil {
		return *x.OpenLongOptionsValue
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetOpenShortOptionsValue() string {
	if x != nil && x.OpenShortOptionsValue != nil {
		return *x.OpenShortOptionsValue
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetClosedOptionsValue() string {
	if x != nil && x.ClosedOptionsValue != nil {
		return *x.ClosedOptionsValue
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetOptionCashReserved() string {
	if x != nil && x.OptionCashReserved != nil {
		return *x.OptionCashReserved
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetOpenPositionPnl() string {
	if x != nil && x.OpenPositionPnl != nil {
		return *x.OpenPositionPnl
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetOpenPositionQuantity() int32 {
	if x != nil && x.OpenPositionQuantity != nil {
		return *x.OpenPositionQuantity
	}
	return 0
}

func (x *InstrumentPnLPositionUpdate) GetClosedPositionPnl() string {
	if x != nil && x.ClosedPositionPnl != nil {
		return *x.ClosedPositionPnl
	}
	return ""
}

func (x *InstrumentPnLPositionUpdate) GetClosedPositionQuantity() int32 {
	if x != nil && x.ClosedPositionQuantity != nil {
		return *x.ClosedPositionQuantity
	}
	return 0
}

func (x *InstrumentPnLPositionUpdate) GetNetQuantity() int32 {
	if x != nil && x.NetQuantity != nil {
		return *x.NetQuantity
	}
	return 0
}

func (x *InstrumentPnLPositionUpdate) GetSsboe() int32 {
	if x != nil && x.Ssboe != nil {
		return *x.Ssboe
	}
	return 0
}

func (x *InstrumentPnLPositionUpdate) GetUsecs() int32 {
	if x != nil && x.Usecs != nil {
		return *x.Usecs
	}
	return 0
}

var File_instrument_pnl_position_update_proto protoreflect.FileDescriptor

var file_instrument_pnl_position_update_proto_rawDesc = []byte{
	0x0a, 0x24, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6e, 0x6c,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x74, 0x69, 0x22, 0xe7, 0x08, 0x0a, 0x1b,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6e, 0x4c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe3, 0xb6, 0x09, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0xa9, 0xdc,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x17, 0x0a, 0x06, 0x66, 0x63, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x9d, 0xb3, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x63, 0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x05, 0x69, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x9e, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x62, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x98, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x94, 0xdc, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x95, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x8d, 0x93, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x29, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xa4, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x71, 0x74, 0x79, 0x18, 0xb9, 0xb3, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x42, 0x75, 0x79, 0x51, 0x74, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0xba, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x6c,
	0x6c, 0x51, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x75,
	0x79, 0x5f, 0x71, 0x74, 0x79, 0x18, 0xb5, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x75, 0x79, 0x51, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x71, 0x74, 0x79, 0x18, 0xb6, 0xb3, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x6c, 0x51,
	0x74, 0x79, 0x12, 0x19, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x94, 0xb5,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x79, 0x51, 0x74, 0x79, 0x12, 0x1b, 0x0a,
	0x08, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x95, 0xb5, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x76,
	0x67, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0xc2, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x76, 0x67, 0x4f, 0x70,
	0x65, 0x6e, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6d,
	0x74, 0x6d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x97, 0xb5, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x74, 0x6d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x37, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xb1, 0xcb, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x18, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xb2, 0xcb, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f,
	0x70, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xb3, 0xcb, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0xb7, 0xcb, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6e,
	0x6c, 0x18, 0xa1, 0xca, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6e, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0xa2, 0xca, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6f, 0x70,
	0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0xa3, 0xca, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6e, 0x6c, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0xa4, 0xca, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0xa7, 0xca, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x73, 0x62, 0x6f, 0x65, 0x18, 0xd4,
	0x94, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x73, 0x62, 0x6f, 0x65, 0x12, 0x16, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0xd5, 0x94, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x63, 0x73,
}

var (
	file_instrument_pnl_position_update_proto_rawDescOnce sync.Once
	file_instrument_pnl_position_update_proto_rawDescData = file_instrument_pnl_position_update_proto_rawDesc
)

func file_instrument_pnl_position_update_proto_rawDescGZIP() []byte {
	file_instrument_pnl_position_update_proto_rawDescOnce.Do(func() {
		file_instrument_pnl_position_update_proto_rawDescData = protoimpl.X.CompressGZIP(file_instrument_pnl_position_update_proto_rawDescData)
	})
	return file_instrument_pnl_position_update_proto_rawDescData
}

var file_instrument_pnl_position_update_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_instrument_pnl_position_update_proto_goTypes = []interface{}{
	(*InstrumentPnLPositionUpdate)(nil), // 0: rti.InstrumentPnLPositionUpdate
}
var file_instrument_pnl_position_update_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_instrument_pnl_position_update_proto_init() }
func file_instrument_pnl_position_update_proto_init() {
	if File_instrument_pnl_position_update_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_instrument_pnl_position_update_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentPnLPositionUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_instrument_pnl_position_update_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_instrument_pnl_position_update_proto_goTypes,
		DependencyIndexes: file_instrument_pnl_position_update_proto_depIdxs,
		MessageInfos:      file_instrument_pnl_position_update_proto_msgTypes,
	}.Build()
	File_instrument_pnl_position_update_proto = out.File
	file_instrument_pnl_position_update_proto_rawDesc = nil
	file_instrument_pnl_position_update_proto_goTypes = nil
	file_instrument_pnl_position_update_proto_depIdxs = nil
}
