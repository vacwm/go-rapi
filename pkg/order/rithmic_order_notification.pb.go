// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: rithmic_order_notification.proto

package order

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RithmicOrderNotification_NotifyType int32

const (
	RithmicOrderNotification_ORDER_RCVD_FROM_CLNT     RithmicOrderNotification_NotifyType = 1
	RithmicOrderNotification_MODIFY_RCVD_FROM_CLNT    RithmicOrderNotification_NotifyType = 2
	RithmicOrderNotification_CANCEL_RCVD_FROM_CLNT    RithmicOrderNotification_NotifyType = 3
	RithmicOrderNotification_OPEN_PENDING             RithmicOrderNotification_NotifyType = 4
	RithmicOrderNotification_MODIFY_PENDING           RithmicOrderNotification_NotifyType = 5
	RithmicOrderNotification_CANCEL_PENDING           RithmicOrderNotification_NotifyType = 6
	RithmicOrderNotification_ORDER_RCVD_BY_EXCH_GTWY  RithmicOrderNotification_NotifyType = 7
	RithmicOrderNotification_MODIFY_RCVD_BY_EXCH_GTWY RithmicOrderNotification_NotifyType = 8
	RithmicOrderNotification_CANCEL_RCVD_BY_EXCH_GTWY RithmicOrderNotification_NotifyType = 9
	RithmicOrderNotification_ORDER_SENT_TO_EXCH       RithmicOrderNotification_NotifyType = 10
	RithmicOrderNotification_MODIFY_SENT_TO_EXCH      RithmicOrderNotification_NotifyType = 11
	RithmicOrderNotification_CANCEL_SENT_TO_EXCH      RithmicOrderNotification_NotifyType = 12
	RithmicOrderNotification_OPEN                     RithmicOrderNotification_NotifyType = 13
	RithmicOrderNotification_MODIFIED                 RithmicOrderNotification_NotifyType = 14
	RithmicOrderNotification_COMPLETE                 RithmicOrderNotification_NotifyType = 15
	RithmicOrderNotification_MODIFICATION_FAILED      RithmicOrderNotification_NotifyType = 16
	RithmicOrderNotification_CANCELLATION_FAILED      RithmicOrderNotification_NotifyType = 17
	RithmicOrderNotification_TRIGGER_PENDING          RithmicOrderNotification_NotifyType = 18
	RithmicOrderNotification_GENERIC                  RithmicOrderNotification_NotifyType = 19
	RithmicOrderNotification_LINK_ORDERS_FAILED       RithmicOrderNotification_NotifyType = 20
)

// Enum value maps for RithmicOrderNotification_NotifyType.
var (
	RithmicOrderNotification_NotifyType_name = map[int32]string{
		1:  "ORDER_RCVD_FROM_CLNT",
		2:  "MODIFY_RCVD_FROM_CLNT",
		3:  "CANCEL_RCVD_FROM_CLNT",
		4:  "OPEN_PENDING",
		5:  "MODIFY_PENDING",
		6:  "CANCEL_PENDING",
		7:  "ORDER_RCVD_BY_EXCH_GTWY",
		8:  "MODIFY_RCVD_BY_EXCH_GTWY",
		9:  "CANCEL_RCVD_BY_EXCH_GTWY",
		10: "ORDER_SENT_TO_EXCH",
		11: "MODIFY_SENT_TO_EXCH",
		12: "CANCEL_SENT_TO_EXCH",
		13: "OPEN",
		14: "MODIFIED",
		15: "COMPLETE",
		16: "MODIFICATION_FAILED",
		17: "CANCELLATION_FAILED",
		18: "TRIGGER_PENDING",
		19: "GENERIC",
		20: "LINK_ORDERS_FAILED",
	}
	RithmicOrderNotification_NotifyType_value = map[string]int32{
		"ORDER_RCVD_FROM_CLNT":     1,
		"MODIFY_RCVD_FROM_CLNT":    2,
		"CANCEL_RCVD_FROM_CLNT":    3,
		"OPEN_PENDING":             4,
		"MODIFY_PENDING":           5,
		"CANCEL_PENDING":           6,
		"ORDER_RCVD_BY_EXCH_GTWY":  7,
		"MODIFY_RCVD_BY_EXCH_GTWY": 8,
		"CANCEL_RCVD_BY_EXCH_GTWY": 9,
		"ORDER_SENT_TO_EXCH":       10,
		"MODIFY_SENT_TO_EXCH":      11,
		"CANCEL_SENT_TO_EXCH":      12,
		"OPEN":                     13,
		"MODIFIED":                 14,
		"COMPLETE":                 15,
		"MODIFICATION_FAILED":      16,
		"CANCELLATION_FAILED":      17,
		"TRIGGER_PENDING":          18,
		"GENERIC":                  19,
		"LINK_ORDERS_FAILED":       20,
	}
)

func (x RithmicOrderNotification_NotifyType) Enum() *RithmicOrderNotification_NotifyType {
	p := new(RithmicOrderNotification_NotifyType)
	*p = x
	return p
}

func (x RithmicOrderNotification_NotifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RithmicOrderNotification_NotifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_rithmic_order_notification_proto_enumTypes[0].Descriptor()
}

func (RithmicOrderNotification_NotifyType) Type() protoreflect.EnumType {
	return &file_rithmic_order_notification_proto_enumTypes[0]
}

func (x RithmicOrderNotification_NotifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RithmicOrderNotification_NotifyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RithmicOrderNotification_NotifyType(num)
	return nil
}

// Deprecated: Use RithmicOrderNotification_NotifyType.Descriptor instead.
func (RithmicOrderNotification_NotifyType) EnumDescriptor() ([]byte, []int) {
	return file_rithmic_order_notification_proto_rawDescGZIP(), []int{0, 0}
}

type RithmicOrderNotification_TransactionType int32

const (
	RithmicOrderNotification_BUY  RithmicOrderNotification_TransactionType = 1
	RithmicOrderNotification_SELL RithmicOrderNotification_TransactionType = 2
)

// Enum value maps for RithmicOrderNotification_TransactionType.
var (
	RithmicOrderNotification_TransactionType_name = map[int32]string{
		1: "BUY",
		2: "SELL",
	}
	RithmicOrderNotification_TransactionType_value = map[string]int32{
		"BUY":  1,
		"SELL": 2,
	}
)

func (x RithmicOrderNotification_TransactionType) Enum() *RithmicOrderNotification_TransactionType {
	p := new(RithmicOrderNotification_TransactionType)
	*p = x
	return p
}

func (x RithmicOrderNotification_TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RithmicOrderNotification_TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_rithmic_order_notification_proto_enumTypes[1].Descriptor()
}

func (RithmicOrderNotification_TransactionType) Type() protoreflect.EnumType {
	return &file_rithmic_order_notification_proto_enumTypes[1]
}

func (x RithmicOrderNotification_TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RithmicOrderNotification_TransactionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RithmicOrderNotification_TransactionType(num)
	return nil
}

// Deprecated: Use RithmicOrderNotification_TransactionType.Descriptor instead.
func (RithmicOrderNotification_TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_rithmic_order_notification_proto_rawDescGZIP(), []int{0, 1}
}

type RithmicOrderNotification_Duration int32

const (
	RithmicOrderNotification_DAY RithmicOrderNotification_Duration = 1
	RithmicOrderNotification_GTC RithmicOrderNotification_Duration = 2
	RithmicOrderNotification_IOC RithmicOrderNotification_Duration = 3
	RithmicOrderNotification_FOK RithmicOrderNotification_Duration = 4
)

// Enum value maps for RithmicOrderNotification_Duration.
var (
	RithmicOrderNotification_Duration_name = map[int32]string{
		1: "DAY",
		2: "GTC",
		3: "IOC",
		4: "FOK",
	}
	RithmicOrderNotification_Duration_value = map[string]int32{
		"DAY": 1,
		"GTC": 2,
		"IOC": 3,
		"FOK": 4,
	}
)

func (x RithmicOrderNotification_Duration) Enum() *RithmicOrderNotification_Duration {
	p := new(RithmicOrderNotification_Duration)
	*p = x
	return p
}

func (x RithmicOrderNotification_Duration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RithmicOrderNotification_Duration) Descriptor() protoreflect.EnumDescriptor {
	return file_rithmic_order_notification_proto_enumTypes[2].Descriptor()
}

func (RithmicOrderNotification_Duration) Type() protoreflect.EnumType {
	return &file_rithmic_order_notification_proto_enumTypes[2]
}

func (x RithmicOrderNotification_Duration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RithmicOrderNotification_Duration) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RithmicOrderNotification_Duration(num)
	return nil
}

// Deprecated: Use RithmicOrderNotification_Duration.Descriptor instead.
func (RithmicOrderNotification_Duration) EnumDescriptor() ([]byte, []int) {
	return file_rithmic_order_notification_proto_rawDescGZIP(), []int{0, 2}
}

type RithmicOrderNotification_PriceType int32

const (
	RithmicOrderNotification_LIMIT       RithmicOrderNotification_PriceType = 1
	RithmicOrderNotification_MARKET      RithmicOrderNotification_PriceType = 2
	RithmicOrderNotification_STOP_LIMIT  RithmicOrderNotification_PriceType = 3
	RithmicOrderNotification_STOP_MARKET RithmicOrderNotification_PriceType = 4
)

// Enum value maps for RithmicOrderNotification_PriceType.
var (
	RithmicOrderNotification_PriceType_name = map[int32]string{
		1: "LIMIT",
		2: "MARKET",
		3: "STOP_LIMIT",
		4: "STOP_MARKET",
	}
	RithmicOrderNotification_PriceType_value = map[string]int32{
		"LIMIT":       1,
		"MARKET":      2,
		"STOP_LIMIT":  3,
		"STOP_MARKET": 4,
	}
)

func (x RithmicOrderNotification_PriceType) Enum() *RithmicOrderNotification_PriceType {
	p := new(RithmicOrderNotification_PriceType)
	*p = x
	return p
}

func (x RithmicOrderNotification_PriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RithmicOrderNotification_PriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_rithmic_order_notification_proto_enumTypes[3].Descriptor()
}

func (RithmicOrderNotification_PriceType) Type() protoreflect.EnumType {
	return &file_rithmic_order_notification_proto_enumTypes[3]
}

func (x RithmicOrderNotification_PriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RithmicOrderNotification_PriceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RithmicOrderNotification_PriceType(num)
	return nil
}

// Deprecated: Use RithmicOrderNotification_PriceType.Descriptor instead.
func (RithmicOrderNotification_PriceType) EnumDescriptor() ([]byte, []int) {
	return file_rithmic_order_notification_proto_rawDescGZIP(), []int{0, 3}
}

type RithmicOrderNotification_OrderPlacement int32

const (
	RithmicOrderNotification_MANUAL RithmicOrderNotification_OrderPlacement = 1
	RithmicOrderNotification_AUTO   RithmicOrderNotification_OrderPlacement = 2
)

// Enum value maps for RithmicOrderNotification_OrderPlacement.
var (
	RithmicOrderNotification_OrderPlacement_name = map[int32]string{
		1: "MANUAL",
		2: "AUTO",
	}
	RithmicOrderNotification_OrderPlacement_value = map[string]int32{
		"MANUAL": 1,
		"AUTO":   2,
	}
)

func (x RithmicOrderNotification_OrderPlacement) Enum() *RithmicOrderNotification_OrderPlacement {
	p := new(RithmicOrderNotification_OrderPlacement)
	*p = x
	return p
}

func (x RithmicOrderNotification_OrderPlacement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RithmicOrderNotification_OrderPlacement) Descriptor() protoreflect.EnumDescriptor {
	return file_rithmic_order_notification_proto_enumTypes[4].Descriptor()
}

func (RithmicOrderNotification_OrderPlacement) Type() protoreflect.EnumType {
	return &file_rithmic_order_notification_proto_enumTypes[4]
}

func (x RithmicOrderNotification_OrderPlacement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RithmicOrderNotification_OrderPlacement) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RithmicOrderNotification_OrderPlacement(num)
	return nil
}

// Deprecated: Use RithmicOrderNotification_OrderPlacement.Descriptor instead.
func (RithmicOrderNotification_OrderPlacement) EnumDescriptor() ([]byte, []int) {
	return file_rithmic_order_notification_proto_rawDescGZIP(), []int{0, 4}
}

type RithmicOrderNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId         *int32                                    `protobuf:"varint,154467,req,name=template_id,json=templateId" json:"template_id,omitempty"`                                                                  // PB_OFFSET + MNM_TEMPLATE_ID
	NotifyType         *RithmicOrderNotification_NotifyType      `protobuf:"varint,153625,opt,name=notify_type,json=notifyType,enum=rti.RithmicOrderNotification_NotifyType" json:"notify_type,omitempty"`                     // PB_OFFSET + MNM_NOTIFICATION_TYPE
	IsSnapshot         *bool                                     `protobuf:"varint,110121,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`                                                                  // PB_OFFSET + MNM_UPDATE_TYPE
	Status             *string                                   `protobuf:"bytes,110303,opt,name=status" json:"status,omitempty"`                                                                                             // PB_OFFSET + MNM_STATUS
	BasketId           *string                                   `protobuf:"bytes,110300,opt,name=basket_id,json=basketId" json:"basket_id,omitempty"`                                                                         // PB_OFFSET + MNM_BASKET_ID
	OriginalBasketId   *string                                   `protobuf:"bytes,154497,opt,name=original_basket_id,json=originalBasketId" json:"original_basket_id,omitempty"`                                               // PB_OFFSET + MNM_ORIGINAL_BASKET_ID
	FcmId              *string                                   `protobuf:"bytes,154013,opt,name=fcm_id,json=fcmId" json:"fcm_id,omitempty"`                                                                                  // PB_OFFSET + MNM_FCM_ID
	IbId               *string                                   `protobuf:"bytes,154014,opt,name=ib_id,json=ibId" json:"ib_id,omitempty"`                                                                                     // PB_OFFSET + MNM_IB_ID
	UserId             *string                                   `protobuf:"bytes,131003,opt,name=user_id,json=userId" json:"user_id,omitempty"`                                                                               // PB_OFFSET + MNM_USER_ID
	AccountId          *string                                   `protobuf:"bytes,154008,opt,name=account_id,json=accountId" json:"account_id,omitempty"`                                                                      // PB_OFFSET + MNM_ACCOUNT_ID
	Symbol             *string                                   `protobuf:"bytes,110100,opt,name=symbol" json:"symbol,omitempty"`                                                                                             // PB_OFFSET + MNM_SYMBOL
	Exchange           *string                                   `protobuf:"bytes,110101,opt,name=exchange" json:"exchange,omitempty"`                                                                                         // PB_OFFSET + MNM_EXCHANGE
	TradeExchange      *string                                   `protobuf:"bytes,112021,opt,name=trade_exchange,json=tradeExchange" json:"trade_exchange,omitempty"`                                                          // PB_OFFSET + MNM_TRADE_EXCHANGE
	TradeRoute         *string                                   `protobuf:"bytes,112016,opt,name=trade_route,json=tradeRoute" json:"trade_route,omitempty"`                                                                   // PB_OFFSET + MNM_TRADE_ROUTE
	ExchangeOrderId    *string                                   `protobuf:"bytes,149238,opt,name=exchange_order_id,json=exchangeOrderId" json:"exchange_order_id,omitempty"`                                                  // PB_OFFSET + MNM_EXCH_ORD_ID
	InstrumentType     *string                                   `protobuf:"bytes,110116,opt,name=instrument_type,json=instrumentType" json:"instrument_type,omitempty"`                                                       // PB_OFFSET + MNM_INSTRUMENT_TYPE
	Quantity           *int32                                    `protobuf:"varint,112004,opt,name=quantity" json:"quantity,omitempty"`                                                                                        // PB_OFFSET + MNM_QUAN_TO_FILL
	Price              *float64                                  `protobuf:"fixed64,110306,opt,name=price" json:"price,omitempty"`                                                                                             // PB_OFFSET + MNM_PRICE_TO_FILL
	TriggerPrice       *float64                                  `protobuf:"fixed64,149247,opt,name=trigger_price,json=triggerPrice" json:"trigger_price,omitempty"`                                                           // PB_OFFSET + MNM_TRIGGER_PRICE
	TransactionType    *RithmicOrderNotification_TransactionType `protobuf:"varint,112003,opt,name=transaction_type,json=transactionType,enum=rti.RithmicOrderNotification_TransactionType" json:"transaction_type,omitempty"` // PB_OFFSET + MNM_TRANSACTION_TYPE
	Duration           *RithmicOrderNotification_Duration        `protobuf:"varint,112005,opt,name=duration,enum=rti.RithmicOrderNotification_Duration" json:"duration,omitempty"`                                             // PB_OFFSET + MNM_ORDER_DURATION
	PriceType          *RithmicOrderNotification_PriceType       `protobuf:"varint,112008,opt,name=price_type,json=priceType,enum=rti.RithmicOrderNotification_PriceType" json:"price_type,omitempty"`                         // PB_OFFSET + MNM_PRICE_TYPE
	OrigPriceType      *RithmicOrderNotification_PriceType       `protobuf:"varint,154770,opt,name=orig_price_type,json=origPriceType,enum=rti.RithmicOrderNotification_PriceType" json:"orig_price_type,omitempty"`           // PB_OFFSET + MNM_ORIG_PRICE_TYPE
	ManualOrAuto       *RithmicOrderNotification_OrderPlacement  `protobuf:"varint,154710,opt,name=manual_or_auto,json=manualOrAuto,enum=rti.RithmicOrderNotification_OrderPlacement" json:"manual_or_auto,omitempty"`         // PB_OFFSET + MNM_MANUAL_OR_AUTO
	SequenceNumber     *string                                   `protobuf:"bytes,112002,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`                                                       // PB_OFFSET + MNM_SEQUENCE_NUMBER
	OrigSequenceNumber *string                                   `protobuf:"bytes,149263,opt,name=orig_sequence_number,json=origSequenceNumber" json:"orig_sequence_number,omitempty"`                                         // PB_OFFSET + MNM_ORIG_SEQUENCE_NUMBER
	CorSequenceNumber  *string                                   `protobuf:"bytes,149264,opt,name=cor_sequence_number,json=corSequenceNumber" json:"cor_sequence_number,omitempty"`                                            // PB_OFFSET + MNM_COR_SEQUENCE_NUMBER
	Currency           *string                                   `protobuf:"bytes,154382,opt,name=currency" json:"currency,omitempty"`                                                                                         // PB_OFFSET + MNM_CURRENCY
	CountryCode        *string                                   `protobuf:"bytes,154172,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`                                                                // PB_OFFSET + MNM_COUNTRY_CODE
	Text               *string                                   `protobuf:"bytes,120008,opt,name=text" json:"text,omitempty"`                                                                                                 // PB_OFFSET + MNM_TEXT
	ReportText         *string                                   `protobuf:"bytes,120028,opt,name=report_text,json=reportText" json:"report_text,omitempty"`                                                                   // PB_OFFSET + MNM_REPORT_TEXT
	Remarks            *string                                   `protobuf:"bytes,154806,opt,name=remarks" json:"remarks,omitempty"`                                                                                           // PB_OFFSET + MNM_REMARKS
	Ssboe              *int32                                    `protobuf:"varint,150100,opt,name=ssboe" json:"ssboe,omitempty"`                                                                                              // PB_OFFSET + MNM_SECONDS_SINCE_BOE
	Usecs              *int32                                    `protobuf:"varint,150101,opt,name=usecs" json:"usecs,omitempty"`                                                                                              // PB_OFFSET + MNM_USECS
}

func (x *RithmicOrderNotification) Reset() {
	*x = RithmicOrderNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rithmic_order_notification_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RithmicOrderNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RithmicOrderNotification) ProtoMessage() {}

func (x *RithmicOrderNotification) ProtoReflect() protoreflect.Message {
	mi := &file_rithmic_order_notification_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RithmicOrderNotification.ProtoReflect.Descriptor instead.
func (*RithmicOrderNotification) Descriptor() ([]byte, []int) {
	return file_rithmic_order_notification_proto_rawDescGZIP(), []int{0}
}

func (x *RithmicOrderNotification) GetTemplateId() int32 {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return 0
}

func (x *RithmicOrderNotification) GetNotifyType() RithmicOrderNotification_NotifyType {
	if x != nil && x.NotifyType != nil {
		return *x.NotifyType
	}
	return RithmicOrderNotification_ORDER_RCVD_FROM_CLNT
}

func (x *RithmicOrderNotification) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *RithmicOrderNotification) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *RithmicOrderNotification) GetBasketId() string {
	if x != nil && x.BasketId != nil {
		return *x.BasketId
	}
	return ""
}

func (x *RithmicOrderNotification) GetOriginalBasketId() string {
	if x != nil && x.OriginalBasketId != nil {
		return *x.OriginalBasketId
	}
	return ""
}

func (x *RithmicOrderNotification) GetFcmId() string {
	if x != nil && x.FcmId != nil {
		return *x.FcmId
	}
	return ""
}

func (x *RithmicOrderNotification) GetIbId() string {
	if x != nil && x.IbId != nil {
		return *x.IbId
	}
	return ""
}

func (x *RithmicOrderNotification) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *RithmicOrderNotification) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *RithmicOrderNotification) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *RithmicOrderNotification) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *RithmicOrderNotification) GetTradeExchange() string {
	if x != nil && x.TradeExchange != nil {
		return *x.TradeExchange
	}
	return ""
}

func (x *RithmicOrderNotification) GetTradeRoute() string {
	if x != nil && x.TradeRoute != nil {
		return *x.TradeRoute
	}
	return ""
}

func (x *RithmicOrderNotification) GetExchangeOrderId() string {
	if x != nil && x.ExchangeOrderId != nil {
		return *x.ExchangeOrderId
	}
	return ""
}

func (x *RithmicOrderNotification) GetInstrumentType() string {
	if x != nil && x.InstrumentType != nil {
		return *x.InstrumentType
	}
	return ""
}

func (x *RithmicOrderNotification) GetQuantity() int32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *RithmicOrderNotification) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *RithmicOrderNotification) GetTriggerPrice() float64 {
	if x != nil && x.TriggerPrice != nil {
		return *x.TriggerPrice
	}
	return 0
}

func (x *RithmicOrderNotification) GetTransactionType() RithmicOrderNotification_TransactionType {
	if x != nil && x.TransactionType != nil {
		return *x.TransactionType
	}
	return RithmicOrderNotification_BUY
}

func (x *RithmicOrderNotification) GetDuration() RithmicOrderNotification_Duration {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return RithmicOrderNotification_DAY
}

func (x *RithmicOrderNotification) GetPriceType() RithmicOrderNotification_PriceType {
	if x != nil && x.PriceType != nil {
		return *x.PriceType
	}
	return RithmicOrderNotification_LIMIT
}

func (x *RithmicOrderNotification) GetOrigPriceType() RithmicOrderNotification_PriceType {
	if x != nil && x.OrigPriceType != nil {
		return *x.OrigPriceType
	}
	return RithmicOrderNotification_LIMIT
}

func (x *RithmicOrderNotification) GetManualOrAuto() RithmicOrderNotification_OrderPlacement {
	if x != nil && x.ManualOrAuto != nil {
		return *x.ManualOrAuto
	}
	return RithmicOrderNotification_MANUAL
}

func (x *RithmicOrderNotification) GetSequenceNumber() string {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return ""
}

func (x *RithmicOrderNotification) GetOrigSequenceNumber() string {
	if x != nil && x.OrigSequenceNumber != nil {
		return *x.OrigSequenceNumber
	}
	return ""
}

func (x *RithmicOrderNotification) GetCorSequenceNumber() string {
	if x != nil && x.CorSequenceNumber != nil {
		return *x.CorSequenceNumber
	}
	return ""
}

func (x *RithmicOrderNotification) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *RithmicOrderNotification) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *RithmicOrderNotification) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *RithmicOrderNotification) GetReportText() string {
	if x != nil && x.ReportText != nil {
		return *x.ReportText
	}
	return ""
}

func (x *RithmicOrderNotification) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *RithmicOrderNotification) GetSsboe() int32 {
	if x != nil && x.Ssboe != nil {
		return *x.Ssboe
	}
	return 0
}

func (x *RithmicOrderNotification) GetUsecs() int32 {
	if x != nil && x.Usecs != nil {
		return *x.Usecs
	}
	return 0
}

var File_rithmic_order_notification_proto protoreflect.FileDescriptor

var file_rithmic_order_notification_proto_rawDesc = []byte{
	0x0a, 0x20, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x72, 0x74, 0x69, 0x22, 0xbb, 0x10, 0x0a, 0x18, 0x52, 0x69, 0x74, 0x68,
	0x6d, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0xe3, 0xb6, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x99, 0xb0, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x72, 0x74, 0x69, 0x2e, 0x52, 0x69, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0xa9, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0xdf, 0xdd, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xdc,
	0xdd, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x81, 0xb7, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x06, 0x66, 0x63, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x9d, 0xb3, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x63, 0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x05, 0x69, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x9e, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x62, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xbb, 0xff, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x98, 0xb3, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x94, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x95, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x95, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x90, 0xeb, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xf6, 0x8d, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0xa4, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x84, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0xe2, 0xdd, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0xff, 0x8d, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x83, 0xeb, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x72, 0x74, 0x69, 0x2e, 0x52, 0x69, 0x74, 0x68, 0x6d, 0x69, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x85,
	0xeb, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x72, 0x74, 0x69, 0x2e, 0x52, 0x69, 0x74,
	0x68, 0x6d, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x88, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x72, 0x74, 0x69, 0x2e, 0x52, 0x69, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x92, 0xb9, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x72, 0x74, 0x69, 0x2e, 0x52, 0x69, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f,
	0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0xd6, 0xb8, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x72, 0x74, 0x69, 0x2e, 0x52, 0x69, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x0f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x82,
	0xeb, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x8f,
	0x8e, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f,
	0x72, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x90, 0x8e, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x72, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x8e, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xbc, 0xb4, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0xc8, 0xa9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0xdc, 0xa9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0xb6, 0xb9, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x73, 0x62, 0x6f, 0x65, 0x18, 0xd4, 0x94,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x73, 0x62, 0x6f, 0x65, 0x12, 0x16, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0xd5, 0x94, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x63, 0x73, 0x22, 0xcb, 0x03, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x43, 0x56,
	0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x43, 0x4c, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x43, 0x56, 0x44, 0x5f, 0x46, 0x52, 0x4f,
	0x4d, 0x5f, 0x43, 0x4c, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x52, 0x43, 0x56, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x43, 0x4c, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x1b, 0x0a,
	0x17, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x43, 0x56, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x45,
	0x58, 0x43, 0x48, 0x5f, 0x47, 0x54, 0x57, 0x59, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x43, 0x56, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x5f, 0x47, 0x54, 0x57, 0x59, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x52, 0x43, 0x56, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x5f,
	0x47, 0x54, 0x57, 0x59, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x10, 0x0a, 0x12, 0x17,
	0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x10, 0x0c,
	0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x10, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x12, 0x12, 0x0b, 0x0a,
	0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x14, 0x22, 0x24, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x2e, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x54, 0x43, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x43, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x4f, 0x4b, 0x10, 0x04, 0x22, 0x43, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x04, 0x22, 0x26, 0x0a,
	0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41,
	0x55, 0x54, 0x4f, 0x10, 0x02,
}

var (
	file_rithmic_order_notification_proto_rawDescOnce sync.Once
	file_rithmic_order_notification_proto_rawDescData = file_rithmic_order_notification_proto_rawDesc
)

func file_rithmic_order_notification_proto_rawDescGZIP() []byte {
	file_rithmic_order_notification_proto_rawDescOnce.Do(func() {
		file_rithmic_order_notification_proto_rawDescData = protoimpl.X.CompressGZIP(file_rithmic_order_notification_proto_rawDescData)
	})
	return file_rithmic_order_notification_proto_rawDescData
}

var file_rithmic_order_notification_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_rithmic_order_notification_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_rithmic_order_notification_proto_goTypes = []interface{}{
	(RithmicOrderNotification_NotifyType)(0),      // 0: rti.RithmicOrderNotification.NotifyType
	(RithmicOrderNotification_TransactionType)(0), // 1: rti.RithmicOrderNotification.TransactionType
	(RithmicOrderNotification_Duration)(0),        // 2: rti.RithmicOrderNotification.Duration
	(RithmicOrderNotification_PriceType)(0),       // 3: rti.RithmicOrderNotification.PriceType
	(RithmicOrderNotification_OrderPlacement)(0),  // 4: rti.RithmicOrderNotification.OrderPlacement
	(*RithmicOrderNotification)(nil),              // 5: rti.RithmicOrderNotification
}
var file_rithmic_order_notification_proto_depIdxs = []int32{
	0, // 0: rti.RithmicOrderNotification.notify_type:type_name -> rti.RithmicOrderNotification.NotifyType
	1, // 1: rti.RithmicOrderNotification.transaction_type:type_name -> rti.RithmicOrderNotification.TransactionType
	2, // 2: rti.RithmicOrderNotification.duration:type_name -> rti.RithmicOrderNotification.Duration
	3, // 3: rti.RithmicOrderNotification.price_type:type_name -> rti.RithmicOrderNotification.PriceType
	3, // 4: rti.RithmicOrderNotification.orig_price_type:type_name -> rti.RithmicOrderNotification.PriceType
	4, // 5: rti.RithmicOrderNotification.manual_or_auto:type_name -> rti.RithmicOrderNotification.OrderPlacement
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_rithmic_order_notification_proto_init() }
func file_rithmic_order_notification_proto_init() {
	if File_rithmic_order_notification_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rithmic_order_notification_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RithmicOrderNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rithmic_order_notification_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rithmic_order_notification_proto_goTypes,
		DependencyIndexes: file_rithmic_order_notification_proto_depIdxs,
		EnumInfos:         file_rithmic_order_notification_proto_enumTypes,
		MessageInfos:      file_rithmic_order_notification_proto_msgTypes,
	}.Build()
	File_rithmic_order_notification_proto = out.File
	file_rithmic_order_notification_proto_rawDesc = nil
	file_rithmic_order_notification_proto_goTypes = nil
	file_rithmic_order_notification_proto_depIdxs = nil
}
