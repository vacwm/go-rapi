// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: request_bracket_order.proto

package order

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RequestBracketOrder_UserType int32

const (
	RequestBracketOrder_USER_TYPE_ADMIN  RequestBracketOrder_UserType = 0
	RequestBracketOrder_USER_TYPE_FCM    RequestBracketOrder_UserType = 1
	RequestBracketOrder_USER_TYPE_IB     RequestBracketOrder_UserType = 2
	RequestBracketOrder_USER_TYPE_TRADER RequestBracketOrder_UserType = 3
)

// Enum value maps for RequestBracketOrder_UserType.
var (
	RequestBracketOrder_UserType_name = map[int32]string{
		0: "USER_TYPE_ADMIN",
		1: "USER_TYPE_FCM",
		2: "USER_TYPE_IB",
		3: "USER_TYPE_TRADER",
	}
	RequestBracketOrder_UserType_value = map[string]int32{
		"USER_TYPE_ADMIN":  0,
		"USER_TYPE_FCM":    1,
		"USER_TYPE_IB":     2,
		"USER_TYPE_TRADER": 3,
	}
)

func (x RequestBracketOrder_UserType) Enum() *RequestBracketOrder_UserType {
	p := new(RequestBracketOrder_UserType)
	*p = x
	return p
}

func (x RequestBracketOrder_UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestBracketOrder_UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_request_bracket_order_proto_enumTypes[0].Descriptor()
}

func (RequestBracketOrder_UserType) Type() protoreflect.EnumType {
	return &file_request_bracket_order_proto_enumTypes[0]
}

func (x RequestBracketOrder_UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RequestBracketOrder_UserType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RequestBracketOrder_UserType(num)
	return nil
}

// Deprecated: Use RequestBracketOrder_UserType.Descriptor instead.
func (RequestBracketOrder_UserType) EnumDescriptor() ([]byte, []int) {
	return file_request_bracket_order_proto_rawDescGZIP(), []int{0, 0}
}

type RequestBracketOrder_BracketType int32

const (
	RequestBracketOrder_STOP_ONLY              RequestBracketOrder_BracketType = 1
	RequestBracketOrder_TARGET_ONLY            RequestBracketOrder_BracketType = 2
	RequestBracketOrder_TARGET_AND_STOP        RequestBracketOrder_BracketType = 3
	RequestBracketOrder_STOP_ONLY_STATIC       RequestBracketOrder_BracketType = 4
	RequestBracketOrder_TARGET_ONLY_STATIC     RequestBracketOrder_BracketType = 5
	RequestBracketOrder_TARGET_AND_STOP_STATIC RequestBracketOrder_BracketType = 6
)

// Enum value maps for RequestBracketOrder_BracketType.
var (
	RequestBracketOrder_BracketType_name = map[int32]string{
		1: "STOP_ONLY",
		2: "TARGET_ONLY",
		3: "TARGET_AND_STOP",
		4: "STOP_ONLY_STATIC",
		5: "TARGET_ONLY_STATIC",
		6: "TARGET_AND_STOP_STATIC",
	}
	RequestBracketOrder_BracketType_value = map[string]int32{
		"STOP_ONLY":              1,
		"TARGET_ONLY":            2,
		"TARGET_AND_STOP":        3,
		"STOP_ONLY_STATIC":       4,
		"TARGET_ONLY_STATIC":     5,
		"TARGET_AND_STOP_STATIC": 6,
	}
)

func (x RequestBracketOrder_BracketType) Enum() *RequestBracketOrder_BracketType {
	p := new(RequestBracketOrder_BracketType)
	*p = x
	return p
}

func (x RequestBracketOrder_BracketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestBracketOrder_BracketType) Descriptor() protoreflect.EnumDescriptor {
	return file_request_bracket_order_proto_enumTypes[1].Descriptor()
}

func (RequestBracketOrder_BracketType) Type() protoreflect.EnumType {
	return &file_request_bracket_order_proto_enumTypes[1]
}

func (x RequestBracketOrder_BracketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RequestBracketOrder_BracketType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RequestBracketOrder_BracketType(num)
	return nil
}

// Deprecated: Use RequestBracketOrder_BracketType.Descriptor instead.
func (RequestBracketOrder_BracketType) EnumDescriptor() ([]byte, []int) {
	return file_request_bracket_order_proto_rawDescGZIP(), []int{0, 1}
}

type RequestBracketOrder_TransactionType int32

const (
	RequestBracketOrder_BUY  RequestBracketOrder_TransactionType = 1
	RequestBracketOrder_SELL RequestBracketOrder_TransactionType = 2
)

// Enum value maps for RequestBracketOrder_TransactionType.
var (
	RequestBracketOrder_TransactionType_name = map[int32]string{
		1: "BUY",
		2: "SELL",
	}
	RequestBracketOrder_TransactionType_value = map[string]int32{
		"BUY":  1,
		"SELL": 2,
	}
)

func (x RequestBracketOrder_TransactionType) Enum() *RequestBracketOrder_TransactionType {
	p := new(RequestBracketOrder_TransactionType)
	*p = x
	return p
}

func (x RequestBracketOrder_TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestBracketOrder_TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_request_bracket_order_proto_enumTypes[2].Descriptor()
}

func (RequestBracketOrder_TransactionType) Type() protoreflect.EnumType {
	return &file_request_bracket_order_proto_enumTypes[2]
}

func (x RequestBracketOrder_TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RequestBracketOrder_TransactionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RequestBracketOrder_TransactionType(num)
	return nil
}

// Deprecated: Use RequestBracketOrder_TransactionType.Descriptor instead.
func (RequestBracketOrder_TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_request_bracket_order_proto_rawDescGZIP(), []int{0, 2}
}

type RequestBracketOrder_Duration int32

const (
	RequestBracketOrder_DAY RequestBracketOrder_Duration = 1
	RequestBracketOrder_GTC RequestBracketOrder_Duration = 2
	RequestBracketOrder_IOC RequestBracketOrder_Duration = 3
	RequestBracketOrder_FOK RequestBracketOrder_Duration = 4
)

// Enum value maps for RequestBracketOrder_Duration.
var (
	RequestBracketOrder_Duration_name = map[int32]string{
		1: "DAY",
		2: "GTC",
		3: "IOC",
		4: "FOK",
	}
	RequestBracketOrder_Duration_value = map[string]int32{
		"DAY": 1,
		"GTC": 2,
		"IOC": 3,
		"FOK": 4,
	}
)

func (x RequestBracketOrder_Duration) Enum() *RequestBracketOrder_Duration {
	p := new(RequestBracketOrder_Duration)
	*p = x
	return p
}

func (x RequestBracketOrder_Duration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestBracketOrder_Duration) Descriptor() protoreflect.EnumDescriptor {
	return file_request_bracket_order_proto_enumTypes[3].Descriptor()
}

func (RequestBracketOrder_Duration) Type() protoreflect.EnumType {
	return &file_request_bracket_order_proto_enumTypes[3]
}

func (x RequestBracketOrder_Duration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RequestBracketOrder_Duration) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RequestBracketOrder_Duration(num)
	return nil
}

// Deprecated: Use RequestBracketOrder_Duration.Descriptor instead.
func (RequestBracketOrder_Duration) EnumDescriptor() ([]byte, []int) {
	return file_request_bracket_order_proto_rawDescGZIP(), []int{0, 3}
}

type RequestBracketOrder_PriceType int32

const (
	RequestBracketOrder_LIMIT             RequestBracketOrder_PriceType = 1
	RequestBracketOrder_MARKET            RequestBracketOrder_PriceType = 2
	RequestBracketOrder_STOP_LIMIT        RequestBracketOrder_PriceType = 3
	RequestBracketOrder_STOP_MARKET       RequestBracketOrder_PriceType = 4
	RequestBracketOrder_MARKET_IF_TOUCHED RequestBracketOrder_PriceType = 5
	RequestBracketOrder_LIMIT_IF_TOUCHED  RequestBracketOrder_PriceType = 6
)

// Enum value maps for RequestBracketOrder_PriceType.
var (
	RequestBracketOrder_PriceType_name = map[int32]string{
		1: "LIMIT",
		2: "MARKET",
		3: "STOP_LIMIT",
		4: "STOP_MARKET",
		5: "MARKET_IF_TOUCHED",
		6: "LIMIT_IF_TOUCHED",
	}
	RequestBracketOrder_PriceType_value = map[string]int32{
		"LIMIT":             1,
		"MARKET":            2,
		"STOP_LIMIT":        3,
		"STOP_MARKET":       4,
		"MARKET_IF_TOUCHED": 5,
		"LIMIT_IF_TOUCHED":  6,
	}
)

func (x RequestBracketOrder_PriceType) Enum() *RequestBracketOrder_PriceType {
	p := new(RequestBracketOrder_PriceType)
	*p = x
	return p
}

func (x RequestBracketOrder_PriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestBracketOrder_PriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_request_bracket_order_proto_enumTypes[4].Descriptor()
}

func (RequestBracketOrder_PriceType) Type() protoreflect.EnumType {
	return &file_request_bracket_order_proto_enumTypes[4]
}

func (x RequestBracketOrder_PriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RequestBracketOrder_PriceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RequestBracketOrder_PriceType(num)
	return nil
}

// Deprecated: Use RequestBracketOrder_PriceType.Descriptor instead.
func (RequestBracketOrder_PriceType) EnumDescriptor() ([]byte, []int) {
	return file_request_bracket_order_proto_rawDescGZIP(), []int{0, 4}
}

type RequestBracketOrder_OrderPlacement int32

const (
	RequestBracketOrder_MANUAL RequestBracketOrder_OrderPlacement = 1
	RequestBracketOrder_AUTO   RequestBracketOrder_OrderPlacement = 2
)

// Enum value maps for RequestBracketOrder_OrderPlacement.
var (
	RequestBracketOrder_OrderPlacement_name = map[int32]string{
		1: "MANUAL",
		2: "AUTO",
	}
	RequestBracketOrder_OrderPlacement_value = map[string]int32{
		"MANUAL": 1,
		"AUTO":   2,
	}
)

func (x RequestBracketOrder_OrderPlacement) Enum() *RequestBracketOrder_OrderPlacement {
	p := new(RequestBracketOrder_OrderPlacement)
	*p = x
	return p
}

func (x RequestBracketOrder_OrderPlacement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestBracketOrder_OrderPlacement) Descriptor() protoreflect.EnumDescriptor {
	return file_request_bracket_order_proto_enumTypes[5].Descriptor()
}

func (RequestBracketOrder_OrderPlacement) Type() protoreflect.EnumType {
	return &file_request_bracket_order_proto_enumTypes[5]
}

func (x RequestBracketOrder_OrderPlacement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RequestBracketOrder_OrderPlacement) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RequestBracketOrder_OrderPlacement(num)
	return nil
}

// Deprecated: Use RequestBracketOrder_OrderPlacement.Descriptor instead.
func (RequestBracketOrder_OrderPlacement) EnumDescriptor() ([]byte, []int) {
	return file_request_bracket_order_proto_rawDescGZIP(), []int{0, 5}
}

type RequestBracketOrder_PriceField int32

const (
	RequestBracketOrder_BID_PRICE   RequestBracketOrder_PriceField = 1
	RequestBracketOrder_OFFER_PRICE RequestBracketOrder_PriceField = 2
	RequestBracketOrder_TRADE_PRICE RequestBracketOrder_PriceField = 3
	RequestBracketOrder_LEAN_PRICE  RequestBracketOrder_PriceField = 4
)

// Enum value maps for RequestBracketOrder_PriceField.
var (
	RequestBracketOrder_PriceField_name = map[int32]string{
		1: "BID_PRICE",
		2: "OFFER_PRICE",
		3: "TRADE_PRICE",
		4: "LEAN_PRICE",
	}
	RequestBracketOrder_PriceField_value = map[string]int32{
		"BID_PRICE":   1,
		"OFFER_PRICE": 2,
		"TRADE_PRICE": 3,
		"LEAN_PRICE":  4,
	}
)

func (x RequestBracketOrder_PriceField) Enum() *RequestBracketOrder_PriceField {
	p := new(RequestBracketOrder_PriceField)
	*p = x
	return p
}

func (x RequestBracketOrder_PriceField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestBracketOrder_PriceField) Descriptor() protoreflect.EnumDescriptor {
	return file_request_bracket_order_proto_enumTypes[6].Descriptor()
}

func (RequestBracketOrder_PriceField) Type() protoreflect.EnumType {
	return &file_request_bracket_order_proto_enumTypes[6]
}

func (x RequestBracketOrder_PriceField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RequestBracketOrder_PriceField) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RequestBracketOrder_PriceField(num)
	return nil
}

// Deprecated: Use RequestBracketOrder_PriceField.Descriptor instead.
func (RequestBracketOrder_PriceField) EnumDescriptor() ([]byte, []int) {
	return file_request_bracket_order_proto_rawDescGZIP(), []int{0, 6}
}

type RequestBracketOrder_Condition int32

const (
	RequestBracketOrder_EQUAL_TO              RequestBracketOrder_Condition = 1
	RequestBracketOrder_NOT_EQUAL_TO          RequestBracketOrder_Condition = 2
	RequestBracketOrder_GREATER_THAN          RequestBracketOrder_Condition = 3
	RequestBracketOrder_GREATER_THAN_EQUAL_TO RequestBracketOrder_Condition = 4
	RequestBracketOrder_LESSER_THAN           RequestBracketOrder_Condition = 5
	RequestBracketOrder_LESSER_THAN_EQUAL_TO  RequestBracketOrder_Condition = 6
)

// Enum value maps for RequestBracketOrder_Condition.
var (
	RequestBracketOrder_Condition_name = map[int32]string{
		1: "EQUAL_TO",
		2: "NOT_EQUAL_TO",
		3: "GREATER_THAN",
		4: "GREATER_THAN_EQUAL_TO",
		5: "LESSER_THAN",
		6: "LESSER_THAN_EQUAL_TO",
	}
	RequestBracketOrder_Condition_value = map[string]int32{
		"EQUAL_TO":              1,
		"NOT_EQUAL_TO":          2,
		"GREATER_THAN":          3,
		"GREATER_THAN_EQUAL_TO": 4,
		"LESSER_THAN":           5,
		"LESSER_THAN_EQUAL_TO":  6,
	}
)

func (x RequestBracketOrder_Condition) Enum() *RequestBracketOrder_Condition {
	p := new(RequestBracketOrder_Condition)
	*p = x
	return p
}

func (x RequestBracketOrder_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestBracketOrder_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_request_bracket_order_proto_enumTypes[7].Descriptor()
}

func (RequestBracketOrder_Condition) Type() protoreflect.EnumType {
	return &file_request_bracket_order_proto_enumTypes[7]
}

func (x RequestBracketOrder_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RequestBracketOrder_Condition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RequestBracketOrder_Condition(num)
	return nil
}

// Deprecated: Use RequestBracketOrder_Condition.Descriptor instead.
func (RequestBracketOrder_Condition) EnumDescriptor() ([]byte, []int) {
	return file_request_bracket_order_proto_rawDescGZIP(), []int{0, 7}
}

type RequestBracketOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId                   *int32                               `protobuf:"varint,154467,req,name=template_id,json=templateId" json:"template_id,omitempty"`                                                                        // PB_OFFSET + MNM_TEMPLATE_ID
	UserMsg                      []string                             `protobuf:"bytes,132760,rep,name=user_msg,json=userMsg" json:"user_msg,omitempty"`                                                                                  // PB_OFFSET + MNM_USER_MSG
	FcmId                        *string                              `protobuf:"bytes,154013,opt,name=fcm_id,json=fcmId" json:"fcm_id,omitempty"`                                                                                        // PB_OFFSET + MNM_FCM_ID
	IbId                         *string                              `protobuf:"bytes,154014,opt,name=ib_id,json=ibId" json:"ib_id,omitempty"`                                                                                           // PB_OFFSET + MNM_IB_ID
	AccountId                    *string                              `protobuf:"bytes,154008,opt,name=account_id,json=accountId" json:"account_id,omitempty"`                                                                            // PB_OFFSET + MNM_ACCOUNT_ID
	Symbol                       *string                              `protobuf:"bytes,110100,opt,name=symbol" json:"symbol,omitempty"`                                                                                                   // PB_OFFSET + MNM_SYMBOL
	Exchange                     *string                              `protobuf:"bytes,110101,opt,name=exchange" json:"exchange,omitempty"`                                                                                               // PB_OFFSET + MNM_EXCHANGE
	Quantity                     *int32                               `protobuf:"varint,112004,opt,name=quantity" json:"quantity,omitempty"`                                                                                              // PB_OFFSET + MNM_QUAN_TO_FILL
	Price                        *float64                             `protobuf:"fixed64,110306,opt,name=price" json:"price,omitempty"`                                                                                                   // PB_OFFSET + MNM_PRICE_TO_FILL
	TriggerPrice                 *float64                             `protobuf:"fixed64,149247,opt,name=trigger_price,json=triggerPrice" json:"trigger_price,omitempty"`                                                                 // PB_OFFSET + MNM_TRIGGER_PRICE
	TransactionType              *RequestBracketOrder_TransactionType `protobuf:"varint,112003,opt,name=transaction_type,json=transactionType,enum=rti.RequestBracketOrder_TransactionType" json:"transaction_type,omitempty"`            // PB_OFFSET + MNM_TRANSACTION_TYPE
	Duration                     *RequestBracketOrder_Duration        `protobuf:"varint,112005,opt,name=duration,enum=rti.RequestBracketOrder_Duration" json:"duration,omitempty"`                                                        // PB_OFFSET + MNM_ORDER_DURATION
	PriceType                    *RequestBracketOrder_PriceType       `protobuf:"varint,112008,opt,name=price_type,json=priceType,enum=rti.RequestBracketOrder_PriceType" json:"price_type,omitempty"`                                    // PB_OFFSET + MNM_PRICE_TYPE
	TradeRoute                   *string                              `protobuf:"bytes,112016,opt,name=trade_route,json=tradeRoute" json:"trade_route,omitempty"`                                                                         // PB_OFFSET + MNM_TRADE_ROUTE
	ManualOrAuto                 *RequestBracketOrder_OrderPlacement  `protobuf:"varint,154710,opt,name=manual_or_auto,json=manualOrAuto,enum=rti.RequestBracketOrder_OrderPlacement" json:"manual_or_auto,omitempty"`                    // PB_OFFSET + MNM_MANUAL_OR_AUTO
	UserType                     *RequestBracketOrder_UserType        `protobuf:"varint,154036,opt,name=user_type,json=userType,enum=rti.RequestBracketOrder_UserType" json:"user_type,omitempty"`                                        // PB_OFFSET + MNM_USER_TYPE
	BracketType                  *RequestBracketOrder_BracketType     `protobuf:"varint,157087,opt,name=bracket_type,json=bracketType,enum=rti.RequestBracketOrder_BracketType" json:"bracket_type,omitempty"`                            // PB_OFFSET + MNM_BRACKET_TYPE
	BreakEvenTicks               *int32                               `protobuf:"varint,157170,opt,name=break_even_ticks,json=breakEvenTicks" json:"break_even_ticks,omitempty"`                                                          // PB_OFFSET + MNM_BREAK_EVEN_TICKS
	BreakEvenTriggerTicks        *int32                               `protobuf:"varint,157172,opt,name=break_even_trigger_ticks,json=breakEvenTriggerTicks" json:"break_even_trigger_ticks,omitempty"`                                   // PB_OFFSET + MNM_BREAK_EVEN_TRIGGER_TICKS
	TargetQuantity               *int32                               `protobuf:"varint,154457,opt,name=target_quantity,json=targetQuantity" json:"target_quantity,omitempty"`                                                            // PB_OFFSET + MNM_TARGET_QUANTITY
	TargetTicks                  *int32                               `protobuf:"varint,154456,opt,name=target_ticks,json=targetTicks" json:"target_ticks,omitempty"`                                                                     // PB_OFFSET + MNM_TARGET_TICKS
	StopQuantity                 *int32                               `protobuf:"varint,154459,opt,name=stop_quantity,json=stopQuantity" json:"stop_quantity,omitempty"`                                                                  // PB_OFFSET + MNM_STOP_QUANTITY
	StopTicks                    *int32                               `protobuf:"varint,154458,opt,name=stop_ticks,json=stopTicks" json:"stop_ticks,omitempty"`                                                                           // PB_OFFSET + MNM_STOP_TICKS
	TrailingStopTriggerTicks     *int32                               `protobuf:"varint,157124,opt,name=trailing_stop_trigger_ticks,json=trailingStopTriggerTicks" json:"trailing_stop_trigger_ticks,omitempty"`                          // PB_OFFSET + MNM_TRAILING_STOP_TRIGGER_TICKS
	TrailingStopByLastTradePrice *bool                                `protobuf:"varint,157062,opt,name=trailing_stop_by_last_trade_price,json=trailingStopByLastTradePrice" json:"trailing_stop_by_last_trade_price,omitempty"`          // PB_OFFSET + MNM_BRACKET_TRAILING_FIELD_ID
	TargetMarketOrderIfTouched   *bool                                `protobuf:"varint,157151,opt,name=target_market_order_if_touched,json=targetMarketOrderIfTouched" json:"target_market_order_if_touched,omitempty"`                  // PB_OFFSET + MNM_TARGET_MARKET_ORDER_IF_TOUCHED
	StopMarketOnReject           *bool                                `protobuf:"varint,154857,opt,name=stop_market_on_reject,json=stopMarketOnReject" json:"stop_market_on_reject,omitempty"`                                            // PB_OFFSET + MNM_STOP_MARKET_ON_REJECT
	TargetMarketAtSsboe          *int32                               `protobuf:"varint,157145,opt,name=target_market_at_ssboe,json=targetMarketAtSsboe" json:"target_market_at_ssboe,omitempty"`                                         // PB_OFFSET + MNM_TARGET_MARKET_AT_SSBOE
	TargetMarketAtUsecs          *int32                               `protobuf:"varint,157146,opt,name=target_market_at_usecs,json=targetMarketAtUsecs" json:"target_market_at_usecs,omitempty"`                                         // PB_OFFSET + MNM_TARGET_MARKET_AT_USECS
	StopMarketAtSsboe            *int32                               `protobuf:"varint,157147,opt,name=stop_market_at_ssboe,json=stopMarketAtSsboe" json:"stop_market_at_ssboe,omitempty"`                                               // PB_OFFSET + MNM_STOP_MARKET_AT_SSBOE
	StopMarketAtUsecs            *int32                               `protobuf:"varint,157148,opt,name=stop_market_at_usecs,json=stopMarketAtUsecs" json:"stop_market_at_usecs,omitempty"`                                               // PB_OFFSET + MNM_STOP_MARKET_AT_USECS
	TargetMarketOrderAfterSecs   *int32                               `protobuf:"varint,157149,opt,name=target_market_order_after_secs,json=targetMarketOrderAfterSecs" json:"target_market_order_after_secs,omitempty"`                  // PB_OFFSET + MNM_TARGET_MARKET_ORDER_AFTER_SECS
	IfTouchedSymbol              *string                              `protobuf:"bytes,154451,opt,name=if_touched_symbol,json=ifTouchedSymbol" json:"if_touched_symbol,omitempty"`                                                        // PB_OFFSET + MNM_TRIGGER_SYMBOL
	IfTouchedExchange            *string                              `protobuf:"bytes,154452,opt,name=if_touched_exchange,json=ifTouchedExchange" json:"if_touched_exchange,omitempty"`                                                  // PB_OFFSET + MNM_TRIGGER_EXCHANGE
	IfTouchedCondition           *RequestBracketOrder_Condition       `protobuf:"varint,154453,opt,name=if_touched_condition,json=ifTouchedCondition,enum=rti.RequestBracketOrder_Condition" json:"if_touched_condition,omitempty"`       // PB_OFFSET + MNM_TRIGGER_CONDITION
	IfTouchedPriceField          *RequestBracketOrder_PriceField      `protobuf:"varint,154454,opt,name=if_touched_price_field,json=ifTouchedPriceField,enum=rti.RequestBracketOrder_PriceField" json:"if_touched_price_field,omitempty"` // PB_OFFSET + MNM_COMPARE_FIELD
	IfTouchedPrice               *float64                             `protobuf:"fixed64,153632,opt,name=if_touched_price,json=ifTouchedPrice" json:"if_touched_price,omitempty"`                                                         // PB_OFFSET + MNM_IF_TOUCHED_PRICE
}

func (x *RequestBracketOrder) Reset() {
	*x = RequestBracketOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_bracket_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBracketOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBracketOrder) ProtoMessage() {}

func (x *RequestBracketOrder) ProtoReflect() protoreflect.Message {
	mi := &file_request_bracket_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBracketOrder.ProtoReflect.Descriptor instead.
func (*RequestBracketOrder) Descriptor() ([]byte, []int) {
	return file_request_bracket_order_proto_rawDescGZIP(), []int{0}
}

func (x *RequestBracketOrder) GetTemplateId() int32 {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return 0
}

func (x *RequestBracketOrder) GetUserMsg() []string {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *RequestBracketOrder) GetFcmId() string {
	if x != nil && x.FcmId != nil {
		return *x.FcmId
	}
	return ""
}

func (x *RequestBracketOrder) GetIbId() string {
	if x != nil && x.IbId != nil {
		return *x.IbId
	}
	return ""
}

func (x *RequestBracketOrder) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *RequestBracketOrder) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *RequestBracketOrder) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *RequestBracketOrder) GetQuantity() int32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *RequestBracketOrder) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *RequestBracketOrder) GetTriggerPrice() float64 {
	if x != nil && x.TriggerPrice != nil {
		return *x.TriggerPrice
	}
	return 0
}

func (x *RequestBracketOrder) GetTransactionType() RequestBracketOrder_TransactionType {
	if x != nil && x.TransactionType != nil {
		return *x.TransactionType
	}
	return RequestBracketOrder_BUY
}

func (x *RequestBracketOrder) GetDuration() RequestBracketOrder_Duration {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return RequestBracketOrder_DAY
}

func (x *RequestBracketOrder) GetPriceType() RequestBracketOrder_PriceType {
	if x != nil && x.PriceType != nil {
		return *x.PriceType
	}
	return RequestBracketOrder_LIMIT
}

func (x *RequestBracketOrder) GetTradeRoute() string {
	if x != nil && x.TradeRoute != nil {
		return *x.TradeRoute
	}
	return ""
}

func (x *RequestBracketOrder) GetManualOrAuto() RequestBracketOrder_OrderPlacement {
	if x != nil && x.ManualOrAuto != nil {
		return *x.ManualOrAuto
	}
	return RequestBracketOrder_MANUAL
}

func (x *RequestBracketOrder) GetUserType() RequestBracketOrder_UserType {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return RequestBracketOrder_USER_TYPE_ADMIN
}

func (x *RequestBracketOrder) GetBracketType() RequestBracketOrder_BracketType {
	if x != nil && x.BracketType != nil {
		return *x.BracketType
	}
	return RequestBracketOrder_STOP_ONLY
}

func (x *RequestBracketOrder) GetBreakEvenTicks() int32 {
	if x != nil && x.BreakEvenTicks != nil {
		return *x.BreakEvenTicks
	}
	return 0
}

func (x *RequestBracketOrder) GetBreakEvenTriggerTicks() int32 {
	if x != nil && x.BreakEvenTriggerTicks != nil {
		return *x.BreakEvenTriggerTicks
	}
	return 0
}

func (x *RequestBracketOrder) GetTargetQuantity() int32 {
	if x != nil && x.TargetQuantity != nil {
		return *x.TargetQuantity
	}
	return 0
}

func (x *RequestBracketOrder) GetTargetTicks() int32 {
	if x != nil && x.TargetTicks != nil {
		return *x.TargetTicks
	}
	return 0
}

func (x *RequestBracketOrder) GetStopQuantity() int32 {
	if x != nil && x.StopQuantity != nil {
		return *x.StopQuantity
	}
	return 0
}

func (x *RequestBracketOrder) GetStopTicks() int32 {
	if x != nil && x.StopTicks != nil {
		return *x.StopTicks
	}
	return 0
}

func (x *RequestBracketOrder) GetTrailingStopTriggerTicks() int32 {
	if x != nil && x.TrailingStopTriggerTicks != nil {
		return *x.TrailingStopTriggerTicks
	}
	return 0
}

func (x *RequestBracketOrder) GetTrailingStopByLastTradePrice() bool {
	if x != nil && x.TrailingStopByLastTradePrice != nil {
		return *x.TrailingStopByLastTradePrice
	}
	return false
}

func (x *RequestBracketOrder) GetTargetMarketOrderIfTouched() bool {
	if x != nil && x.TargetMarketOrderIfTouched != nil {
		return *x.TargetMarketOrderIfTouched
	}
	return false
}

func (x *RequestBracketOrder) GetStopMarketOnReject() bool {
	if x != nil && x.StopMarketOnReject != nil {
		return *x.StopMarketOnReject
	}
	return false
}

func (x *RequestBracketOrder) GetTargetMarketAtSsboe() int32 {
	if x != nil && x.TargetMarketAtSsboe != nil {
		return *x.TargetMarketAtSsboe
	}
	return 0
}

func (x *RequestBracketOrder) GetTargetMarketAtUsecs() int32 {
	if x != nil && x.TargetMarketAtUsecs != nil {
		return *x.TargetMarketAtUsecs
	}
	return 0
}

func (x *RequestBracketOrder) GetStopMarketAtSsboe() int32 {
	if x != nil && x.StopMarketAtSsboe != nil {
		return *x.StopMarketAtSsboe
	}
	return 0
}

func (x *RequestBracketOrder) GetStopMarketAtUsecs() int32 {
	if x != nil && x.StopMarketAtUsecs != nil {
		return *x.StopMarketAtUsecs
	}
	return 0
}

func (x *RequestBracketOrder) GetTargetMarketOrderAfterSecs() int32 {
	if x != nil && x.TargetMarketOrderAfterSecs != nil {
		return *x.TargetMarketOrderAfterSecs
	}
	return 0
}

func (x *RequestBracketOrder) GetIfTouchedSymbol() string {
	if x != nil && x.IfTouchedSymbol != nil {
		return *x.IfTouchedSymbol
	}
	return ""
}

func (x *RequestBracketOrder) GetIfTouchedExchange() string {
	if x != nil && x.IfTouchedExchange != nil {
		return *x.IfTouchedExchange
	}
	return ""
}

func (x *RequestBracketOrder) GetIfTouchedCondition() RequestBracketOrder_Condition {
	if x != nil && x.IfTouchedCondition != nil {
		return *x.IfTouchedCondition
	}
	return RequestBracketOrder_EQUAL_TO
}

func (x *RequestBracketOrder) GetIfTouchedPriceField() RequestBracketOrder_PriceField {
	if x != nil && x.IfTouchedPriceField != nil {
		return *x.IfTouchedPriceField
	}
	return RequestBracketOrder_BID_PRICE
}

func (x *RequestBracketOrder) GetIfTouchedPrice() float64 {
	if x != nil && x.IfTouchedPrice != nil {
		return *x.IfTouchedPrice
	}
	return 0
}

var File_request_bracket_order_proto protoreflect.FileDescriptor

var file_request_bracket_order_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72,
	0x74, 0x69, 0x22, 0xa9, 0x14, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe3, 0xb6, 0x09, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x98, 0x8d, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x06, 0x66, 0x63,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x9d, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x63,
	0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x05, 0x69, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x9e, 0xb3, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x98, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x94, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x95, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x84, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0xe2, 0xdd, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0xff, 0x8d, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x55, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x83, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x72,
	0x74, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x85, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x72, 0x74,
	0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x88, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x72, 0x74, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x90, 0xeb, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x4f, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x18, 0xd6, 0xb8, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x74, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x72, 0x41, 0x75, 0x74,
	0x6f, 0x12, 0x40, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb4,
	0xb3, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x72, 0x74, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x9f, 0xcb, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x74,
	0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x73, 0x18, 0xf2, 0xcb, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x45, 0x76, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x39, 0x0a, 0x18, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0xf4, 0xcb, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xd9, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0xd8, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xdb, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x74, 0x6f, 0x70, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0xda, 0xb6, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x3f, 0x0a,
	0x1b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0xc4, 0xcb, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x49,
	0x0a, 0x21, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x62, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x86, 0xcb, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x1e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x18, 0xdf, 0xcb, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x66, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0xe9, 0xb9, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x73, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x6e, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x73, 0x62, 0x6f, 0x65, 0x18, 0xd9,
	0xcb, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x53, 0x73, 0x62, 0x6f, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0xda, 0xcb, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x55, 0x73, 0x65,
	0x63, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x73, 0x62, 0x6f, 0x65, 0x18, 0xdb, 0xcb, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x74,
	0x53, 0x73, 0x62, 0x6f, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0xdc, 0xcb,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x41, 0x74, 0x55, 0x73, 0x65, 0x63, 0x73, 0x12, 0x44, 0x0a, 0x1e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0xdd, 0xcb, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0xd3, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x66, 0x54,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x13,
	0x69, 0x66, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0xd4, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x66, 0x54,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x56,
	0x0a, 0x14, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd5, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x72, 0x74, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x69, 0x66, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x16, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0xd6, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72, 0x74, 0x69, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x13, 0x69,
	0x66, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0xa0, 0xb0, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x69, 0x66, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x5a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x43, 0x4d,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x42, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x10, 0x03, 0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x42,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x06, 0x22, 0x24, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x22,
	0x2e, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x41, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x43, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x4f, 0x43, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x4f, 0x4b, 0x10, 0x04, 0x22,
	0x70, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x49,
	0x46, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x45, 0x44, 0x10,
	0x06, 0x22, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x22, 0x4d, 0x0a, 0x0a, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x49, 0x44, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x41, 0x4e,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x04, 0x22, 0x83, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f,
	0x54, 0x4f, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54,
	0x4f, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x53, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x45, 0x53, 0x53, 0x45, 0x52, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x06,
}

var (
	file_request_bracket_order_proto_rawDescOnce sync.Once
	file_request_bracket_order_proto_rawDescData = file_request_bracket_order_proto_rawDesc
)

func file_request_bracket_order_proto_rawDescGZIP() []byte {
	file_request_bracket_order_proto_rawDescOnce.Do(func() {
		file_request_bracket_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_request_bracket_order_proto_rawDescData)
	})
	return file_request_bracket_order_proto_rawDescData
}

var file_request_bracket_order_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_request_bracket_order_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_request_bracket_order_proto_goTypes = []interface{}{
	(RequestBracketOrder_UserType)(0),        // 0: rti.RequestBracketOrder.UserType
	(RequestBracketOrder_BracketType)(0),     // 1: rti.RequestBracketOrder.BracketType
	(RequestBracketOrder_TransactionType)(0), // 2: rti.RequestBracketOrder.TransactionType
	(RequestBracketOrder_Duration)(0),        // 3: rti.RequestBracketOrder.Duration
	(RequestBracketOrder_PriceType)(0),       // 4: rti.RequestBracketOrder.PriceType
	(RequestBracketOrder_OrderPlacement)(0),  // 5: rti.RequestBracketOrder.OrderPlacement
	(RequestBracketOrder_PriceField)(0),      // 6: rti.RequestBracketOrder.PriceField
	(RequestBracketOrder_Condition)(0),       // 7: rti.RequestBracketOrder.Condition
	(*RequestBracketOrder)(nil),              // 8: rti.RequestBracketOrder
}
var file_request_bracket_order_proto_depIdxs = []int32{
	2, // 0: rti.RequestBracketOrder.transaction_type:type_name -> rti.RequestBracketOrder.TransactionType
	3, // 1: rti.RequestBracketOrder.duration:type_name -> rti.RequestBracketOrder.Duration
	4, // 2: rti.RequestBracketOrder.price_type:type_name -> rti.RequestBracketOrder.PriceType
	5, // 3: rti.RequestBracketOrder.manual_or_auto:type_name -> rti.RequestBracketOrder.OrderPlacement
	0, // 4: rti.RequestBracketOrder.user_type:type_name -> rti.RequestBracketOrder.UserType
	1, // 5: rti.RequestBracketOrder.bracket_type:type_name -> rti.RequestBracketOrder.BracketType
	7, // 6: rti.RequestBracketOrder.if_touched_condition:type_name -> rti.RequestBracketOrder.Condition
	6, // 7: rti.RequestBracketOrder.if_touched_price_field:type_name -> rti.RequestBracketOrder.PriceField
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_request_bracket_order_proto_init() }
func file_request_bracket_order_proto_init() {
	if File_request_bracket_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_request_bracket_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBracketOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_request_bracket_order_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_request_bracket_order_proto_goTypes,
		DependencyIndexes: file_request_bracket_order_proto_depIdxs,
		EnumInfos:         file_request_bracket_order_proto_enumTypes,
		MessageInfos:      file_request_bracket_order_proto_msgTypes,
	}.Build()
	File_request_bracket_order_proto = out.File
	file_request_bracket_order_proto_rawDesc = nil
	file_request_bracket_order_proto_goTypes = nil
	file_request_bracket_order_proto_depIdxs = nil
}
