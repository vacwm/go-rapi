// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: last_trade.proto

package market

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// below enum is just for reference only, not used in this message
type LastTrade_PresenceBits int32

const (
	LastTrade_LAST_TRADE     LastTrade_PresenceBits = 1
	LastTrade_NET_CHANGE     LastTrade_PresenceBits = 2
	LastTrade_PRECENT_CHANGE LastTrade_PresenceBits = 4
	LastTrade_VOLUME         LastTrade_PresenceBits = 8
	LastTrade_VWAP           LastTrade_PresenceBits = 16
)

// Enum value maps for LastTrade_PresenceBits.
var (
	LastTrade_PresenceBits_name = map[int32]string{
		1:  "LAST_TRADE",
		2:  "NET_CHANGE",
		4:  "PRECENT_CHANGE",
		8:  "VOLUME",
		16: "VWAP",
	}
	LastTrade_PresenceBits_value = map[string]int32{
		"LAST_TRADE":     1,
		"NET_CHANGE":     2,
		"PRECENT_CHANGE": 4,
		"VOLUME":         8,
		"VWAP":           16,
	}
)

func (x LastTrade_PresenceBits) Enum() *LastTrade_PresenceBits {
	p := new(LastTrade_PresenceBits)
	*p = x
	return p
}

func (x LastTrade_PresenceBits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LastTrade_PresenceBits) Descriptor() protoreflect.EnumDescriptor {
	return file_last_trade_proto_enumTypes[0].Descriptor()
}

func (LastTrade_PresenceBits) Type() protoreflect.EnumType {
	return &file_last_trade_proto_enumTypes[0]
}

func (x LastTrade_PresenceBits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LastTrade_PresenceBits) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LastTrade_PresenceBits(num)
	return nil
}

// Deprecated: Use LastTrade_PresenceBits.Descriptor instead.
func (LastTrade_PresenceBits) EnumDescriptor() ([]byte, []int) {
	return file_last_trade_proto_rawDescGZIP(), []int{0, 0}
}

type LastTrade_TransactionType int32

const (
	LastTrade_BUY  LastTrade_TransactionType = 1
	LastTrade_SELL LastTrade_TransactionType = 2
)

// Enum value maps for LastTrade_TransactionType.
var (
	LastTrade_TransactionType_name = map[int32]string{
		1: "BUY",
		2: "SELL",
	}
	LastTrade_TransactionType_value = map[string]int32{
		"BUY":  1,
		"SELL": 2,
	}
)

func (x LastTrade_TransactionType) Enum() *LastTrade_TransactionType {
	p := new(LastTrade_TransactionType)
	*p = x
	return p
}

func (x LastTrade_TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LastTrade_TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_last_trade_proto_enumTypes[1].Descriptor()
}

func (LastTrade_TransactionType) Type() protoreflect.EnumType {
	return &file_last_trade_proto_enumTypes[1]
}

func (x LastTrade_TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LastTrade_TransactionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LastTrade_TransactionType(num)
	return nil
}

// Deprecated: Use LastTrade_TransactionType.Descriptor instead.
func (LastTrade_TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_last_trade_proto_rawDescGZIP(), []int{0, 1}
}

type LastTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId               *int32                     `protobuf:"varint,154467,req,name=template_id,json=templateId" json:"template_id,omitempty"`                                              // PB_OFFSET + MNM_TEMPLATE_ID
	Symbol                   *string                    `protobuf:"bytes,110100,opt,name=symbol" json:"symbol,omitempty"`                                                                         // PB_OFFSET + MNM_SYMBOL
	Exchange                 *string                    `protobuf:"bytes,110101,opt,name=exchange" json:"exchange,omitempty"`                                                                     // PB_OFFSET + MNM_EXCHANGE
	PresenceBits             *uint32                    `protobuf:"varint,149138,opt,name=presence_bits,json=presenceBits" json:"presence_bits,omitempty"`                                        // PB_OFFSET + MNM_PRICING_INDICATOR
	ClearBits                *uint32                    `protobuf:"varint,154571,opt,name=clear_bits,json=clearBits" json:"clear_bits,omitempty"`                                                 // PB_OFFSET + MNM_DISPLAY_INDICATOR
	IsSnapshot               *bool                      `protobuf:"varint,110121,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`                                              // PB_OFFSET + MNM_UPDATE_TYPE
	TradePrice               *float64                   `protobuf:"fixed64,100006,opt,name=trade_price,json=tradePrice" json:"trade_price,omitempty"`                                             // PB_OFFSET + MNM_TRADE_PRICE
	TradeSize                *int32                     `protobuf:"varint,100178,opt,name=trade_size,json=tradeSize" json:"trade_size,omitempty"`                                                 // PB_OFFSET + MNM_TRADE_SIZE
	Aggressor                *LastTrade_TransactionType `protobuf:"varint,112003,opt,name=aggressor,enum=rti.LastTrade_TransactionType" json:"aggressor,omitempty"`                               // PB_OFFSET + MNM_TRANSACTION_TYPE
	ExchangeOrderId          *string                    `protobuf:"bytes,149238,opt,name=exchange_order_id,json=exchangeOrderId" json:"exchange_order_id,omitempty"`                              // PB_OFFSET + MNM_EXCH_ORD_ID
	AggressorExchangeOrderId *string                    `protobuf:"bytes,154641,opt,name=aggressor_exchange_order_id,json=aggressorExchangeOrderId" json:"aggressor_exchange_order_id,omitempty"` // PB_OFFSET + MNM_AGGRESSOR_EXCH_ORD_ID
	NetChange                *float64                   `protobuf:"fixed64,100011,opt,name=net_change,json=netChange" json:"net_change,omitempty"`                                                // PB_OFFSET + MNM_NET_CHANGE
	PercentChange            *float64                   `protobuf:"fixed64,100056,opt,name=percent_change,json=percentChange" json:"percent_change,omitempty"`                                    // PB_OFFSET + MNM_PERCENT_CHANGE
	Volume                   *uint64                    `protobuf:"varint,100032,opt,name=volume" json:"volume,omitempty"`                                                                        // PB_OFFSET + MNM_TRADE_VOLUME
	Vwap                     *float64                   `protobuf:"fixed64,101379,opt,name=vwap" json:"vwap,omitempty"`                                                                           // PB_OFFSET + MNM_VWAP
	Ssboe                    *int32                     `protobuf:"varint,150100,opt,name=ssboe" json:"ssboe,omitempty"`                                                                          // PB_OFFSET + MNM_SECONDS_SINCE_BOE
	Usecs                    *int32                     `protobuf:"varint,150101,opt,name=usecs" json:"usecs,omitempty"`                                                                          // PB_OFFSET + MNM_USECS
	SourceSsboe              *int32                     `protobuf:"varint,150400,opt,name=source_ssboe,json=sourceSsboe" json:"source_ssboe,omitempty"`                                           // PB_OFFSET + MNM_SOURCE_SSBOE
	SourceUsecs              *int32                     `protobuf:"varint,150401,opt,name=source_usecs,json=sourceUsecs" json:"source_usecs,omitempty"`                                           // PB_OFFSET + MNM_SOURCE_USECS
	SourceNsecs              *int32                     `protobuf:"varint,150404,opt,name=source_nsecs,json=sourceNsecs" json:"source_nsecs,omitempty"`                                           // PB_OFFSET + MNM_SOURCE_NSECS
	JopSsboe                 *int32                     `protobuf:"varint,150600,opt,name=jop_ssboe,json=jopSsboe" json:"jop_ssboe,omitempty"`                                                    // PB_OFFSET + MNM_JOP_SSBOE
	JopNsecs                 *int32                     `protobuf:"varint,150604,opt,name=jop_nsecs,json=jopNsecs" json:"jop_nsecs,omitempty"`                                                    // PB_OFFSET + MNM_JOP_NSECS
}

func (x *LastTrade) Reset() {
	*x = LastTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_last_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastTrade) ProtoMessage() {}

func (x *LastTrade) ProtoReflect() protoreflect.Message {
	mi := &file_last_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastTrade.ProtoReflect.Descriptor instead.
func (*LastTrade) Descriptor() ([]byte, []int) {
	return file_last_trade_proto_rawDescGZIP(), []int{0}
}

func (x *LastTrade) GetTemplateId() int32 {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return 0
}

func (x *LastTrade) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *LastTrade) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *LastTrade) GetPresenceBits() uint32 {
	if x != nil && x.PresenceBits != nil {
		return *x.PresenceBits
	}
	return 0
}

func (x *LastTrade) GetClearBits() uint32 {
	if x != nil && x.ClearBits != nil {
		return *x.ClearBits
	}
	return 0
}

func (x *LastTrade) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *LastTrade) GetTradePrice() float64 {
	if x != nil && x.TradePrice != nil {
		return *x.TradePrice
	}
	return 0
}

func (x *LastTrade) GetTradeSize() int32 {
	if x != nil && x.TradeSize != nil {
		return *x.TradeSize
	}
	return 0
}

func (x *LastTrade) GetAggressor() LastTrade_TransactionType {
	if x != nil && x.Aggressor != nil {
		return *x.Aggressor
	}
	return LastTrade_BUY
}

func (x *LastTrade) GetExchangeOrderId() string {
	if x != nil && x.ExchangeOrderId != nil {
		return *x.ExchangeOrderId
	}
	return ""
}

func (x *LastTrade) GetAggressorExchangeOrderId() string {
	if x != nil && x.AggressorExchangeOrderId != nil {
		return *x.AggressorExchangeOrderId
	}
	return ""
}

func (x *LastTrade) GetNetChange() float64 {
	if x != nil && x.NetChange != nil {
		return *x.NetChange
	}
	return 0
}

func (x *LastTrade) GetPercentChange() float64 {
	if x != nil && x.PercentChange != nil {
		return *x.PercentChange
	}
	return 0
}

func (x *LastTrade) GetVolume() uint64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *LastTrade) GetVwap() float64 {
	if x != nil && x.Vwap != nil {
		return *x.Vwap
	}
	return 0
}

func (x *LastTrade) GetSsboe() int32 {
	if x != nil && x.Ssboe != nil {
		return *x.Ssboe
	}
	return 0
}

func (x *LastTrade) GetUsecs() int32 {
	if x != nil && x.Usecs != nil {
		return *x.Usecs
	}
	return 0
}

func (x *LastTrade) GetSourceSsboe() int32 {
	if x != nil && x.SourceSsboe != nil {
		return *x.SourceSsboe
	}
	return 0
}

func (x *LastTrade) GetSourceUsecs() int32 {
	if x != nil && x.SourceUsecs != nil {
		return *x.SourceUsecs
	}
	return 0
}

func (x *LastTrade) GetSourceNsecs() int32 {
	if x != nil && x.SourceNsecs != nil {
		return *x.SourceNsecs
	}
	return 0
}

func (x *LastTrade) GetJopSsboe() int32 {
	if x != nil && x.JopSsboe != nil {
		return *x.JopSsboe
	}
	return 0
}

func (x *LastTrade) GetJopNsecs() int32 {
	if x != nil && x.JopNsecs != nil {
		return *x.JopNsecs
	}
	return 0
}

var File_last_trade_proto protoreflect.FileDescriptor

var file_last_trade_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x72, 0x74, 0x69, 0x22, 0x9b, 0x07, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0xe3, 0xb6, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x94, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x95,
	0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x69, 0x74,
	0x73, 0x18, 0x92, 0x8d, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0xcb, 0xb7, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x42, 0x69, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0xa9, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0xa6, 0x8d, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xd2, 0x8e, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x3e, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x83, 0xeb, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x74, 0x69, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0xf6, 0x8d, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x1b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x91, 0xb8, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xab, 0x8d, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0xd8, 0x8d, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0xc0, 0x8d, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x76, 0x77, 0x61, 0x70, 0x18, 0x83, 0x98, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x76, 0x77, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x73, 0x62, 0x6f,
	0x65, 0x18, 0xd4, 0x94, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x73, 0x62, 0x6f, 0x65,
	0x12, 0x16, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0xd5, 0x94, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x75, 0x73, 0x65, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x73, 0x62, 0x6f, 0x65, 0x18, 0x80, 0x97, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x73, 0x62, 0x6f, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0x81, 0x97,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x63, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x65,
	0x63, 0x73, 0x18, 0x84, 0x97, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x73, 0x65, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x6a, 0x6f, 0x70, 0x5f, 0x73,
	0x73, 0x62, 0x6f, 0x65, 0x18, 0xc8, 0x98, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6a, 0x6f,
	0x70, 0x53, 0x73, 0x62, 0x6f, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6a, 0x6f, 0x70, 0x5f, 0x6e, 0x73,
	0x65, 0x63, 0x73, 0x18, 0xcc, 0x98, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6a, 0x6f, 0x70,
	0x4e, 0x73, 0x65, 0x63, 0x73, 0x22, 0x58, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x69, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x57, 0x41, 0x50, 0x10, 0x10, 0x22,
	0x24, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x45, 0x4c, 0x4c, 0x10, 0x02,
}

var (
	file_last_trade_proto_rawDescOnce sync.Once
	file_last_trade_proto_rawDescData = file_last_trade_proto_rawDesc
)

func file_last_trade_proto_rawDescGZIP() []byte {
	file_last_trade_proto_rawDescOnce.Do(func() {
		file_last_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_last_trade_proto_rawDescData)
	})
	return file_last_trade_proto_rawDescData
}

var file_last_trade_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_last_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_last_trade_proto_goTypes = []interface{}{
	(LastTrade_PresenceBits)(0),    // 0: rti.LastTrade.PresenceBits
	(LastTrade_TransactionType)(0), // 1: rti.LastTrade.TransactionType
	(*LastTrade)(nil),              // 2: rti.LastTrade
}
var file_last_trade_proto_depIdxs = []int32{
	1, // 0: rti.LastTrade.aggressor:type_name -> rti.LastTrade.TransactionType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_last_trade_proto_init() }
func file_last_trade_proto_init() {
	if File_last_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_last_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_last_trade_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_last_trade_proto_goTypes,
		DependencyIndexes: file_last_trade_proto_depIdxs,
		EnumInfos:         file_last_trade_proto_enumTypes,
		MessageInfos:      file_last_trade_proto_msgTypes,
	}.Build()
	File_last_trade_proto = out.File
	file_last_trade_proto_rawDesc = nil
	file_last_trade_proto_goTypes = nil
	file_last_trade_proto_depIdxs = nil
}
