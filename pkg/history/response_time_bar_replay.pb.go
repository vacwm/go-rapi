// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: response_time_bar_replay.proto

package history

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ResponseTimeBarReplay_BarType int32

const (
	ResponseTimeBarReplay_SECOND_BAR ResponseTimeBarReplay_BarType = 1
	ResponseTimeBarReplay_MINUTE_BAR ResponseTimeBarReplay_BarType = 2
	ResponseTimeBarReplay_DAILY_BAR  ResponseTimeBarReplay_BarType = 3
	ResponseTimeBarReplay_WEEKLY_BAR ResponseTimeBarReplay_BarType = 4
)

// Enum value maps for ResponseTimeBarReplay_BarType.
var (
	ResponseTimeBarReplay_BarType_name = map[int32]string{
		1: "SECOND_BAR",
		2: "MINUTE_BAR",
		3: "DAILY_BAR",
		4: "WEEKLY_BAR",
	}
	ResponseTimeBarReplay_BarType_value = map[string]int32{
		"SECOND_BAR": 1,
		"MINUTE_BAR": 2,
		"DAILY_BAR":  3,
		"WEEKLY_BAR": 4,
	}
)

func (x ResponseTimeBarReplay_BarType) Enum() *ResponseTimeBarReplay_BarType {
	p := new(ResponseTimeBarReplay_BarType)
	*p = x
	return p
}

func (x ResponseTimeBarReplay_BarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseTimeBarReplay_BarType) Descriptor() protoreflect.EnumDescriptor {
	return file_response_time_bar_replay_proto_enumTypes[0].Descriptor()
}

func (ResponseTimeBarReplay_BarType) Type() protoreflect.EnumType {
	return &file_response_time_bar_replay_proto_enumTypes[0]
}

func (x ResponseTimeBarReplay_BarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResponseTimeBarReplay_BarType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResponseTimeBarReplay_BarType(num)
	return nil
}

// Deprecated: Use ResponseTimeBarReplay_BarType.Descriptor instead.
func (ResponseTimeBarReplay_BarType) EnumDescriptor() ([]byte, []int) {
	return file_response_time_bar_replay_proto_rawDescGZIP(), []int{0, 0}
}

type ResponseTimeBarReplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId         *int32                         `protobuf:"varint,154467,req,name=template_id,json=templateId" json:"template_id,omitempty"`                           // PB_OFFSET + MNM_TEMPLATE_ID
	UserMsg            []string                       `protobuf:"bytes,132760,rep,name=user_msg,json=userMsg" json:"user_msg,omitempty"`                                     // PB_OFFSET + MNM_USER_MSG
	RqHandlerRpCode    []string                       `protobuf:"bytes,132764,rep,name=rq_handler_rp_code,json=rqHandlerRpCode" json:"rq_handler_rp_code,omitempty"`         // PB_OFFSET + MNM_REQUEST_HANDLER_RESPONSE_CODE
	RpCode             []string                       `protobuf:"bytes,132766,rep,name=rp_code,json=rpCode" json:"rp_code,omitempty"`                                        // PB_OFFSET + MNM_RESPONSE_CODE
	Symbol             *string                        `protobuf:"bytes,110100,opt,name=symbol" json:"symbol,omitempty"`                                                      // PB_OFFSET + MNM_SYMBOL
	Exchange           *string                        `protobuf:"bytes,110101,opt,name=exchange" json:"exchange,omitempty"`                                                  // PB_OFFSET + MNM_EXCHANGE
	Type               *ResponseTimeBarReplay_BarType `protobuf:"varint,119200,opt,name=type,enum=rti.ResponseTimeBarReplay_BarType" json:"type,omitempty"`                  // PB_OFFSET + MNM_DATA_BAR_TYPE
	Period             *string                        `protobuf:"bytes,119112,opt,name=period" json:"period,omitempty"`                                                      // PB_OFFSET + MNM_TIME_BAR_PERIOD
	Marker             *int32                         `protobuf:"varint,119100,opt,name=marker" json:"marker,omitempty"`                                                     // PB_OFFSET + MNM_TIME_BAR_MARKER
	NumTrades          *uint64                        `protobuf:"varint,119109,opt,name=num_trades,json=numTrades" json:"num_trades,omitempty"`                              // PB_OFFSET + MNM_TIME_BAR_NUM_TRADES
	Volume             *uint64                        `protobuf:"varint,119110,opt,name=volume" json:"volume,omitempty"`                                                     // PB_OFFSET + MNM_TIME_BAR_TRADE_VOLUME
	BidVolume          *uint64                        `protobuf:"varint,119117,opt,name=bid_volume,json=bidVolume" json:"bid_volume,omitempty"`                              // PB_OFFSET + MNM_TIME_BAR_BID_VOLUME
	AskVolume          *uint64                        `protobuf:"varint,119118,opt,name=ask_volume,json=askVolume" json:"ask_volume,omitempty"`                              // PB_OFFSET + MNM_TIME_BAR_ASK_VOLUME
	OpenPrice          *float64                       `protobuf:"fixed64,100019,opt,name=open_price,json=openPrice" json:"open_price,omitempty"`                             // PB_OFFSET + MNM_OPEN_PRICE
	ClosePrice         *float64                       `protobuf:"fixed64,100021,opt,name=close_price,json=closePrice" json:"close_price,omitempty"`                          // PB_OFFSET + MNM_CLOSE_TRADE_PRICE
	HighPrice          *float64                       `protobuf:"fixed64,100012,opt,name=high_price,json=highPrice" json:"high_price,omitempty"`                             // PB_OFFSET + MNM_HIGH_PRICE
	LowPrice           *float64                       `protobuf:"fixed64,100013,opt,name=low_price,json=lowPrice" json:"low_price,omitempty"`                                // PB_OFFSET + MNM_LOW_PRICE
	SettlementPrice    *float64                       `protobuf:"fixed64,100070,opt,name=settlement_price,json=settlementPrice" json:"settlement_price,omitempty"`           // PB_OFFSET + MNM_SETTLEMENT_PRICE
	HasSettlementPrice *bool                          `protobuf:"varint,149138,opt,name=has_settlement_price,json=hasSettlementPrice" json:"has_settlement_price,omitempty"` // PB_OFFSET + MNM_PRICING_INDICATOR
}

func (x *ResponseTimeBarReplay) Reset() {
	*x = ResponseTimeBarReplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_time_bar_replay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTimeBarReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTimeBarReplay) ProtoMessage() {}

func (x *ResponseTimeBarReplay) ProtoReflect() protoreflect.Message {
	mi := &file_response_time_bar_replay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTimeBarReplay.ProtoReflect.Descriptor instead.
func (*ResponseTimeBarReplay) Descriptor() ([]byte, []int) {
	return file_response_time_bar_replay_proto_rawDescGZIP(), []int{0}
}

func (x *ResponseTimeBarReplay) GetTemplateId() int32 {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return 0
}

func (x *ResponseTimeBarReplay) GetUserMsg() []string {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *ResponseTimeBarReplay) GetRqHandlerRpCode() []string {
	if x != nil {
		return x.RqHandlerRpCode
	}
	return nil
}

func (x *ResponseTimeBarReplay) GetRpCode() []string {
	if x != nil {
		return x.RpCode
	}
	return nil
}

func (x *ResponseTimeBarReplay) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *ResponseTimeBarReplay) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *ResponseTimeBarReplay) GetType() ResponseTimeBarReplay_BarType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ResponseTimeBarReplay_SECOND_BAR
}

func (x *ResponseTimeBarReplay) GetPeriod() string {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return ""
}

func (x *ResponseTimeBarReplay) GetMarker() int32 {
	if x != nil && x.Marker != nil {
		return *x.Marker
	}
	return 0
}

func (x *ResponseTimeBarReplay) GetNumTrades() uint64 {
	if x != nil && x.NumTrades != nil {
		return *x.NumTrades
	}
	return 0
}

func (x *ResponseTimeBarReplay) GetVolume() uint64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ResponseTimeBarReplay) GetBidVolume() uint64 {
	if x != nil && x.BidVolume != nil {
		return *x.BidVolume
	}
	return 0
}

func (x *ResponseTimeBarReplay) GetAskVolume() uint64 {
	if x != nil && x.AskVolume != nil {
		return *x.AskVolume
	}
	return 0
}

func (x *ResponseTimeBarReplay) GetOpenPrice() float64 {
	if x != nil && x.OpenPrice != nil {
		return *x.OpenPrice
	}
	return 0
}

func (x *ResponseTimeBarReplay) GetClosePrice() float64 {
	if x != nil && x.ClosePrice != nil {
		return *x.ClosePrice
	}
	return 0
}

func (x *ResponseTimeBarReplay) GetHighPrice() float64 {
	if x != nil && x.HighPrice != nil {
		return *x.HighPrice
	}
	return 0
}

func (x *ResponseTimeBarReplay) GetLowPrice() float64 {
	if x != nil && x.LowPrice != nil {
		return *x.LowPrice
	}
	return 0
}

func (x *ResponseTimeBarReplay) GetSettlementPrice() float64 {
	if x != nil && x.SettlementPrice != nil {
		return *x.SettlementPrice
	}
	return 0
}

func (x *ResponseTimeBarReplay) GetHasSettlementPrice() bool {
	if x != nil && x.HasSettlementPrice != nil {
		return *x.HasSettlementPrice
	}
	return false
}

var File_response_time_bar_replay_proto protoreflect.FileDescriptor

var file_response_time_bar_replay_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x62, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x72, 0x74, 0x69, 0x22, 0xf3, 0x05, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x21, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe3,
	0xb6, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x98,
	0x8d, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x71, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x9c, 0x8d, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x71, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x07, 0x72, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x9e, 0x8d, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x94, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x95, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa0, 0xa3, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x72, 0x74, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x42, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0xc8, 0xa2, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18,
	0xbc, 0xa2, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0xc5, 0xa2,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0xc6, 0xa2, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x69,
	0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0xcd, 0xa2, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x61,
	0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0xce, 0xa2, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0xb3, 0x8d, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0xb5, 0x8d, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0xac,
	0x8d, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0xad,
	0x8d, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2b, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0xe6, 0x8d, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x92, 0x8d, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68,
	0x61, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x22, 0x48, 0x0a, 0x07, 0x42, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x57,
	0x45, 0x45, 0x4b, 0x4c, 0x59, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x04,
}

var (
	file_response_time_bar_replay_proto_rawDescOnce sync.Once
	file_response_time_bar_replay_proto_rawDescData = file_response_time_bar_replay_proto_rawDesc
)

func file_response_time_bar_replay_proto_rawDescGZIP() []byte {
	file_response_time_bar_replay_proto_rawDescOnce.Do(func() {
		file_response_time_bar_replay_proto_rawDescData = protoimpl.X.CompressGZIP(file_response_time_bar_replay_proto_rawDescData)
	})
	return file_response_time_bar_replay_proto_rawDescData
}

var file_response_time_bar_replay_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_response_time_bar_replay_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_response_time_bar_replay_proto_goTypes = []interface{}{
	(ResponseTimeBarReplay_BarType)(0), // 0: rti.ResponseTimeBarReplay.BarType
	(*ResponseTimeBarReplay)(nil),      // 1: rti.ResponseTimeBarReplay
}
var file_response_time_bar_replay_proto_depIdxs = []int32{
	0, // 0: rti.ResponseTimeBarReplay.type:type_name -> rti.ResponseTimeBarReplay.BarType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_response_time_bar_replay_proto_init() }
func file_response_time_bar_replay_proto_init() {
	if File_response_time_bar_replay_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_response_time_bar_replay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTimeBarReplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_response_time_bar_replay_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_response_time_bar_replay_proto_goTypes,
		DependencyIndexes: file_response_time_bar_replay_proto_depIdxs,
		EnumInfos:         file_response_time_bar_replay_proto_enumTypes,
		MessageInfos:      file_response_time_bar_replay_proto_msgTypes,
	}.Build()
	File_response_time_bar_replay_proto = out.File
	file_response_time_bar_replay_proto_rawDesc = nil
	file_response_time_bar_replay_proto_goTypes = nil
	file_response_time_bar_replay_proto_depIdxs = nil
}
