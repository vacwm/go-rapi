// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: response_get_instrument_by_underlying.proto

package rti

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// bit constants are defined using enum
type ResponseGetInstrumentByUnderlying_PresenceBits int32

const (
	ResponseGetInstrumentByUnderlying_EXCHANGE_SYMBOL      ResponseGetInstrumentByUnderlying_PresenceBits = 1
	ResponseGetInstrumentByUnderlying_SYMBOL_NAME          ResponseGetInstrumentByUnderlying_PresenceBits = 2
	ResponseGetInstrumentByUnderlying_PRODUCT_CODE         ResponseGetInstrumentByUnderlying_PresenceBits = 4
	ResponseGetInstrumentByUnderlying_INSTRUMENT_TYPE      ResponseGetInstrumentByUnderlying_PresenceBits = 8
	ResponseGetInstrumentByUnderlying_UNDERLYING_SYMBOL    ResponseGetInstrumentByUnderlying_PresenceBits = 16
	ResponseGetInstrumentByUnderlying_EXPIRATION_DATE      ResponseGetInstrumentByUnderlying_PresenceBits = 32
	ResponseGetInstrumentByUnderlying_CURRENCY             ResponseGetInstrumentByUnderlying_PresenceBits = 64
	ResponseGetInstrumentByUnderlying_PUT_CALL_INDICATOR   ResponseGetInstrumentByUnderlying_PresenceBits = 128
	ResponseGetInstrumentByUnderlying_STRIKE_PRICE         ResponseGetInstrumentByUnderlying_PresenceBits = 256
	ResponseGetInstrumentByUnderlying_FPRICE_TO_QPRICE     ResponseGetInstrumentByUnderlying_PresenceBits = 512
	ResponseGetInstrumentByUnderlying_QPRICE_TO_FPRICE     ResponseGetInstrumentByUnderlying_PresenceBits = 1024
	ResponseGetInstrumentByUnderlying_MIN_QPRICE_CHANGE    ResponseGetInstrumentByUnderlying_PresenceBits = 2048
	ResponseGetInstrumentByUnderlying_MIN_FRPICE_CHANGE    ResponseGetInstrumentByUnderlying_PresenceBits = 4096
	ResponseGetInstrumentByUnderlying_SINGLE_POINT_VALUE   ResponseGetInstrumentByUnderlying_PresenceBits = 8192
	ResponseGetInstrumentByUnderlying_TICK_SIZE_TYPE       ResponseGetInstrumentByUnderlying_PresenceBits = 16384
	ResponseGetInstrumentByUnderlying_PRICE_DISPLAY_FORMAT ResponseGetInstrumentByUnderlying_PresenceBits = 32768
)

// Enum value maps for ResponseGetInstrumentByUnderlying_PresenceBits.
var (
	ResponseGetInstrumentByUnderlying_PresenceBits_name = map[int32]string{
		1:     "EXCHANGE_SYMBOL",
		2:     "SYMBOL_NAME",
		4:     "PRODUCT_CODE",
		8:     "INSTRUMENT_TYPE",
		16:    "UNDERLYING_SYMBOL",
		32:    "EXPIRATION_DATE",
		64:    "CURRENCY",
		128:   "PUT_CALL_INDICATOR",
		256:   "STRIKE_PRICE",
		512:   "FPRICE_TO_QPRICE",
		1024:  "QPRICE_TO_FPRICE",
		2048:  "MIN_QPRICE_CHANGE",
		4096:  "MIN_FRPICE_CHANGE",
		8192:  "SINGLE_POINT_VALUE",
		16384: "TICK_SIZE_TYPE",
		32768: "PRICE_DISPLAY_FORMAT",
	}
	ResponseGetInstrumentByUnderlying_PresenceBits_value = map[string]int32{
		"EXCHANGE_SYMBOL":      1,
		"SYMBOL_NAME":          2,
		"PRODUCT_CODE":         4,
		"INSTRUMENT_TYPE":      8,
		"UNDERLYING_SYMBOL":    16,
		"EXPIRATION_DATE":      32,
		"CURRENCY":             64,
		"PUT_CALL_INDICATOR":   128,
		"STRIKE_PRICE":         256,
		"FPRICE_TO_QPRICE":     512,
		"QPRICE_TO_FPRICE":     1024,
		"MIN_QPRICE_CHANGE":    2048,
		"MIN_FRPICE_CHANGE":    4096,
		"SINGLE_POINT_VALUE":   8192,
		"TICK_SIZE_TYPE":       16384,
		"PRICE_DISPLAY_FORMAT": 32768,
	}
)

func (x ResponseGetInstrumentByUnderlying_PresenceBits) Enum() *ResponseGetInstrumentByUnderlying_PresenceBits {
	p := new(ResponseGetInstrumentByUnderlying_PresenceBits)
	*p = x
	return p
}

func (x ResponseGetInstrumentByUnderlying_PresenceBits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseGetInstrumentByUnderlying_PresenceBits) Descriptor() protoreflect.EnumDescriptor {
	return file_response_get_instrument_by_underlying_proto_enumTypes[0].Descriptor()
}

func (ResponseGetInstrumentByUnderlying_PresenceBits) Type() protoreflect.EnumType {
	return &file_response_get_instrument_by_underlying_proto_enumTypes[0]
}

func (x ResponseGetInstrumentByUnderlying_PresenceBits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResponseGetInstrumentByUnderlying_PresenceBits) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResponseGetInstrumentByUnderlying_PresenceBits(num)
	return nil
}

// Deprecated: Use ResponseGetInstrumentByUnderlying_PresenceBits.Descriptor instead.
func (ResponseGetInstrumentByUnderlying_PresenceBits) EnumDescriptor() ([]byte, []int) {
	return file_response_get_instrument_by_underlying_proto_rawDescGZIP(), []int{0, 0}
}

type ResponseGetInstrumentByUnderlying struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId         *int32   `protobuf:"varint,154467,req,name=template_id,json=templateId" json:"template_id,omitempty"`                          // PB_OFFSET + MNM_TEMPLATE_ID
	UserMsg            []string `protobuf:"bytes,132760,rep,name=user_msg,json=userMsg" json:"user_msg,omitempty"`                                    // PB_OFFSET + MNM_USER_MSG
	RqHandlerRpCode    []string `protobuf:"bytes,132764,rep,name=rq_handler_rp_code,json=rqHandlerRpCode" json:"rq_handler_rp_code,omitempty"`        // PB_OFFSET + MNM_REQUEST_HANDLER_RESPONSE_CODE
	RpCode             []string `protobuf:"bytes,132766,rep,name=rp_code,json=rpCode" json:"rp_code,omitempty"`                                       // PB_OFFSET + MNM_RESPONSE_CODE
	PresenceBits       *uint32  `protobuf:"varint,149138,opt,name=presence_bits,json=presenceBits" json:"presence_bits,omitempty"`                    // PB_OFFSET + MNM_PRICING_INDICATOR
	ClearBits          *uint32  `protobuf:"varint,154571,opt,name=clear_bits,json=clearBits" json:"clear_bits,omitempty"`                             // PB_OFFSET + MNM_DISPLAY_INDICATOR
	Symbol             *string  `protobuf:"bytes,110100,opt,name=symbol" json:"symbol,omitempty"`                                                     // PB_OFFSET + MNM_SYMBOL
	Exchange           *string  `protobuf:"bytes,110101,opt,name=exchange" json:"exchange,omitempty"`                                                 // PB_OFFSET + MNM_EXCHANGE
	ExchangeSymbol     *string  `protobuf:"bytes,110114,opt,name=exchange_symbol,json=exchangeSymbol" json:"exchange_symbol,omitempty"`               // PB_OFFSET + MNM_EXCHANGE_SYMBOL
	SymbolName         *string  `protobuf:"bytes,100003,opt,name=symbol_name,json=symbolName" json:"symbol_name,omitempty"`                           // PB_OFFSET + MNM_SYMBOL_NAME
	ProductCode        *string  `protobuf:"bytes,100749,opt,name=product_code,json=productCode" json:"product_code,omitempty"`                        // PB_OFFSET + MNM_PRODUCT_CODE
	InstrumentType     *string  `protobuf:"bytes,110116,opt,name=instrument_type,json=instrumentType" json:"instrument_type,omitempty"`               // PB_OFFSET + MNM_INSTRUMENT_TYPE
	UnderlyingSymbol   *string  `protobuf:"bytes,101026,opt,name=underlying_symbol,json=underlyingSymbol" json:"underlying_symbol,omitempty"`         // PB_OFFSET + MNM_UNDERLYING_SYMBOL
	ExpirationDate     *string  `protobuf:"bytes,100067,opt,name=expiration_date,json=expirationDate" json:"expiration_date,omitempty"`               // PB_OFFSET + MNM_EXPIRATION_DATE
	Currency           *string  `protobuf:"bytes,154382,opt,name=currency" json:"currency,omitempty"`                                                 // PB_OFFSET + MNM_SYMBOL_CURRENCY
	PutCallIndicator   *string  `protobuf:"bytes,100109,opt,name=put_call_indicator,json=putCallIndicator" json:"put_call_indicator,omitempty"`       // PB_OFFSET + MNM_PUT_CALL_INDICATOR
	TickSizeType       *string  `protobuf:"bytes,154167,opt,name=tick_size_type,json=tickSizeType" json:"tick_size_type,omitempty"`                   // PB_OFFSET + MNM_TICK_SIZE_TYPE
	PriceDisplayFormat *string  `protobuf:"bytes,154390,opt,name=price_display_format,json=priceDisplayFormat" json:"price_display_format,omitempty"` // PB_OFFSET + MNM_PRICE_DISPLAY_FORMAT
	StrikePrice        *float64 `protobuf:"fixed64,100066,opt,name=strike_price,json=strikePrice" json:"strike_price,omitempty"`                      // PB_OFFSET + MNM_STRIKE_PRICE
	FtoqPrice          *float64 `protobuf:"fixed64,154384,opt,name=ftoq_price,json=ftoqPrice" json:"ftoq_price,omitempty"`                            // PB_OFFSET + MNM_FPRICE_TO_QPRICE
	QtofPrice          *float64 `protobuf:"fixed64,154385,opt,name=qtof_price,json=qtofPrice" json:"qtof_price,omitempty"`                            // PB_OFFSET + MNM_QPRICE_TO_FPRICE
	MinQpriceChange    *float64 `protobuf:"fixed64,154386,opt,name=min_qprice_change,json=minQpriceChange" json:"min_qprice_change,omitempty"`        // PB_OFFSET + MNM_MIN_QPRICE_CHANGE
	MinFpriceChange    *float64 `protobuf:"fixed64,154387,opt,name=min_fprice_change,json=minFpriceChange" json:"min_fprice_change,omitempty"`        // PB_OFFSET + MNM_MIN_FPRICE_CHANGE
	SinglePointValue   *float64 `protobuf:"fixed64,154389,opt,name=single_point_value,json=singlePointValue" json:"single_point_value,omitempty"`     // PB_OFFSET + MNM_SINGLE_POINT_VALUE
}

func (x *ResponseGetInstrumentByUnderlying) Reset() {
	*x = ResponseGetInstrumentByUnderlying{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_get_instrument_by_underlying_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetInstrumentByUnderlying) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetInstrumentByUnderlying) ProtoMessage() {}

func (x *ResponseGetInstrumentByUnderlying) ProtoReflect() protoreflect.Message {
	mi := &file_response_get_instrument_by_underlying_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetInstrumentByUnderlying.ProtoReflect.Descriptor instead.
func (*ResponseGetInstrumentByUnderlying) Descriptor() ([]byte, []int) {
	return file_response_get_instrument_by_underlying_proto_rawDescGZIP(), []int{0}
}

func (x *ResponseGetInstrumentByUnderlying) GetTemplateId() int32 {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return 0
}

func (x *ResponseGetInstrumentByUnderlying) GetUserMsg() []string {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *ResponseGetInstrumentByUnderlying) GetRqHandlerRpCode() []string {
	if x != nil {
		return x.RqHandlerRpCode
	}
	return nil
}

func (x *ResponseGetInstrumentByUnderlying) GetRpCode() []string {
	if x != nil {
		return x.RpCode
	}
	return nil
}

func (x *ResponseGetInstrumentByUnderlying) GetPresenceBits() uint32 {
	if x != nil && x.PresenceBits != nil {
		return *x.PresenceBits
	}
	return 0
}

func (x *ResponseGetInstrumentByUnderlying) GetClearBits() uint32 {
	if x != nil && x.ClearBits != nil {
		return *x.ClearBits
	}
	return 0
}

func (x *ResponseGetInstrumentByUnderlying) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *ResponseGetInstrumentByUnderlying) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *ResponseGetInstrumentByUnderlying) GetExchangeSymbol() string {
	if x != nil && x.ExchangeSymbol != nil {
		return *x.ExchangeSymbol
	}
	return ""
}

func (x *ResponseGetInstrumentByUnderlying) GetSymbolName() string {
	if x != nil && x.SymbolName != nil {
		return *x.SymbolName
	}
	return ""
}

func (x *ResponseGetInstrumentByUnderlying) GetProductCode() string {
	if x != nil && x.ProductCode != nil {
		return *x.ProductCode
	}
	return ""
}

func (x *ResponseGetInstrumentByUnderlying) GetInstrumentType() string {
	if x != nil && x.InstrumentType != nil {
		return *x.InstrumentType
	}
	return ""
}

func (x *ResponseGetInstrumentByUnderlying) GetUnderlyingSymbol() string {
	if x != nil && x.UnderlyingSymbol != nil {
		return *x.UnderlyingSymbol
	}
	return ""
}

func (x *ResponseGetInstrumentByUnderlying) GetExpirationDate() string {
	if x != nil && x.ExpirationDate != nil {
		return *x.ExpirationDate
	}
	return ""
}

func (x *ResponseGetInstrumentByUnderlying) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *ResponseGetInstrumentByUnderlying) GetPutCallIndicator() string {
	if x != nil && x.PutCallIndicator != nil {
		return *x.PutCallIndicator
	}
	return ""
}

func (x *ResponseGetInstrumentByUnderlying) GetTickSizeType() string {
	if x != nil && x.TickSizeType != nil {
		return *x.TickSizeType
	}
	return ""
}

func (x *ResponseGetInstrumentByUnderlying) GetPriceDisplayFormat() string {
	if x != nil && x.PriceDisplayFormat != nil {
		return *x.PriceDisplayFormat
	}
	return ""
}

func (x *ResponseGetInstrumentByUnderlying) GetStrikePrice() float64 {
	if x != nil && x.StrikePrice != nil {
		return *x.StrikePrice
	}
	return 0
}

func (x *ResponseGetInstrumentByUnderlying) GetFtoqPrice() float64 {
	if x != nil && x.FtoqPrice != nil {
		return *x.FtoqPrice
	}
	return 0
}

func (x *ResponseGetInstrumentByUnderlying) GetQtofPrice() float64 {
	if x != nil && x.QtofPrice != nil {
		return *x.QtofPrice
	}
	return 0
}

func (x *ResponseGetInstrumentByUnderlying) GetMinQpriceChange() float64 {
	if x != nil && x.MinQpriceChange != nil {
		return *x.MinQpriceChange
	}
	return 0
}

func (x *ResponseGetInstrumentByUnderlying) GetMinFpriceChange() float64 {
	if x != nil && x.MinFpriceChange != nil {
		return *x.MinFpriceChange
	}
	return 0
}

func (x *ResponseGetInstrumentByUnderlying) GetSinglePointValue() float64 {
	if x != nil && x.SinglePointValue != nil {
		return *x.SinglePointValue
	}
	return 0
}

var File_response_get_instrument_by_underlying_proto protoreflect.FileDescriptor

var file_response_get_instrument_by_underlying_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72,
	0x74, 0x69, 0x22, 0xaf, 0x0a, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe3, 0xb6, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x98, 0x8d, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x71, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x9c,
	0x8d, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x71, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x52, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x72, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x9e, 0x8d, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62,
	0x69, 0x74, 0x73, 0x18, 0x92, 0x8d, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0xcb, 0xb7, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x94, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x95, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0xa2, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x21, 0x0a,
	0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa3, 0x8d, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x8d, 0x93, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa4, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2d, 0x0a, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0xa2, 0x95, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x29, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0xe3, 0x8d, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x8e, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x75, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x8d,
	0x8e, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69, 0x63, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb7, 0xb4, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x96, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0xe2, 0x8d, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x66, 0x74, 0x6f,
	0x71, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x90, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x66, 0x74, 0x6f, 0x71, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x71, 0x74,
	0x6f, 0x66, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x91, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x71, 0x74, 0x6f, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d,
	0x69, 0x6e, 0x5f, 0x71, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x92, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x51, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x69, 0x6e,
	0x5f, 0x66, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x93,
	0xb6, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x46, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x95, 0xb6,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xea, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x69, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x4c, 0x59,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x20, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x40, 0x12,
	0x17, 0x0a, 0x12, 0x50, 0x55, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49,
	0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x80, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x54, 0x52, 0x49,
	0x4b, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x80, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x46,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10,
	0x80, 0x04, 0x12, 0x15, 0x0a, 0x10, 0x51, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x5f,
	0x46, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x80, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x49, 0x4e,
	0x5f, 0x51, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x80,
	0x10, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x50, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x80, 0x20, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x49, 0x4e,
	0x47, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x80, 0x40, 0x12, 0x14, 0x0a, 0x0e, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x80, 0x80, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x10, 0x80, 0x80, 0x02,
}

var (
	file_response_get_instrument_by_underlying_proto_rawDescOnce sync.Once
	file_response_get_instrument_by_underlying_proto_rawDescData = file_response_get_instrument_by_underlying_proto_rawDesc
)

func file_response_get_instrument_by_underlying_proto_rawDescGZIP() []byte {
	file_response_get_instrument_by_underlying_proto_rawDescOnce.Do(func() {
		file_response_get_instrument_by_underlying_proto_rawDescData = protoimpl.X.CompressGZIP(file_response_get_instrument_by_underlying_proto_rawDescData)
	})
	return file_response_get_instrument_by_underlying_proto_rawDescData
}

var file_response_get_instrument_by_underlying_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_response_get_instrument_by_underlying_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_response_get_instrument_by_underlying_proto_goTypes = []interface{}{
	(ResponseGetInstrumentByUnderlying_PresenceBits)(0), // 0: rti.ResponseGetInstrumentByUnderlying.PresenceBits
	(*ResponseGetInstrumentByUnderlying)(nil),           // 1: rti.ResponseGetInstrumentByUnderlying
}
var file_response_get_instrument_by_underlying_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_response_get_instrument_by_underlying_proto_init() }
func file_response_get_instrument_by_underlying_proto_init() {
	if File_response_get_instrument_by_underlying_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_response_get_instrument_by_underlying_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetInstrumentByUnderlying); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_response_get_instrument_by_underlying_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_response_get_instrument_by_underlying_proto_goTypes,
		DependencyIndexes: file_response_get_instrument_by_underlying_proto_depIdxs,
		EnumInfos:         file_response_get_instrument_by_underlying_proto_enumTypes,
		MessageInfos:      file_response_get_instrument_by_underlying_proto_msgTypes,
	}.Build()
	File_response_get_instrument_by_underlying_proto = out.File
	file_response_get_instrument_by_underlying_proto_rawDesc = nil
	file_response_get_instrument_by_underlying_proto_goTypes = nil
	file_response_get_instrument_by_underlying_proto_depIdxs = nil
}
